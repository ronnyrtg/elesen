
@model TradingLicense.Model.ApplicationModel
@using AutoMapper;
@using System.Linq;
@using TradingLicense.Infrastructure;
@{
    ViewBag.Title = "Manage License Application";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<TradingLicense.Model.BTModel> businessTypeList = new List<TradingLicense.Model.BTModel>();
    List<TradingLicense.Model.SectorModel> sectorsList = new List<TradingLicense.Model.SectorModel>();
    List<TradingLicense.Model.E_GROUPModel> entmtGroupList = new List<TradingLicense.Model.E_GROUPModel>();
    List<TradingLicense.Model.CompanyModel> companiesList = new List<TradingLicense.Model.CompanyModel>();
    List<TradingLicense.Model.Select2ListItem> businessCodeList = new List<TradingLicense.Model.Select2ListItem>();
    List<TradingLicense.Model.AppStatusModel> appStatusList = new List<TradingLicense.Model.AppStatusModel>();
    List<TradingLicense.Model.PremiseTypeModel> PremiseTypeList = new List<TradingLicense.Model.PremiseTypeModel>();
    List<TradingLicense.Model.DepartmentModel> departmentList = new List<TradingLicense.Model.DepartmentModel>();

    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {
        var businessType = ctx.BT.ToList();
        businessTypeList = Mapper.Map<List<TradingLicense.Model.BTModel>>(businessType);

        var sectors = ctx.Sectors.ToList();
        sectorsList = Mapper.Map<List<TradingLicense.Model.SectorModel>>(sectors);

        var entmtGroup = ctx.E_GROUPs.ToList();
        entmtGroupList = Mapper.Map<List<TradingLicense.Model.E_GROUPModel>>(entmtGroup);

        var companies = ctx.Companies.ToList();
        companiesList = Mapper.Map<List<TradingLicense.Model.CompanyModel>>(companies);

        var premiseType = ctx.PremiseTypes.ToList();
        PremiseTypeList = Mapper.Map<List<TradingLicense.Model.PremiseTypeModel>>(premiseType);

        var appStatus = ctx.AppStatus.ToList();
        appStatusList = Mapper.Map<List<TradingLicense.Model.AppStatusModel>>(appStatus);

        var dept = ctx.Departments.ToList();
        departmentList = Mapper.Map<List<TradingLicense.Model.DepartmentModel>>(dept);
    }

    List<SelectListItem> LicenseList = new List<SelectListItem>();
    LicenseList.Add(new SelectListItem { Text = "Lesen Tred, Perniagaan & Perindustrian", Value = "1" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Petempatan Makanan", Value = "2" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Hotel dan Rumah Tumpangan", Value = "3" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Pengurusan Skrap", Value = "4" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Iklan", Value = "5" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Penjaja", Value = "6" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Pasar", Value = "7" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Minuman Keras", Value = "8" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Pemberi Pinjam Wang", Value = "9" });
    LicenseList.Add(new SelectListItem { Text = "Lesen Hiburan", Value = "10" });

    List<SelectListItem> ModeList = new List<SelectListItem>();
    ModeList.Add(new SelectListItem { Text = "Biasa", Value = "3" });
    ModeList.Add(new SelectListItem { Text = "Mesyuarat", Value = "4" });
    ModeList.Add(new SelectListItem { Text = "Pengarah", Value = "2" });
    ModeList.Add(new SelectListItem { Text = "Ekspres", Value = "1" });

    List<SelectListItem> PremiseOwnershipList = new List<SelectListItem>();
    PremiseOwnershipList.Add(new SelectListItem { Text = "Sewaan", Value = "0" });
    PremiseOwnershipList.Add(new SelectListItem { Text = "Pemilikan Sendiri", Value = "1" });

}
<div id="divMessage"></div>
<div class="card">
    <div class="header">
        <h4 id="headerTitle">Permohonan Baru</h4>
    </div>
    <div class="body">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmApplication", id = "frmApplication" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.APP_ID)
            @Html.HiddenFor(m => m.USERSID)
            @Html.HiddenFor(m => m.UserRollTemplate)
            @Html.HiddenFor(m => m.RequiredDocIds)
            @Html.HiddenFor(m => m.AdditionalDocIds)
            @Html.HiddenFor(m => m.IsDraft)
            @Html.HiddenFor(m => m.APPSTATUSID)
            @Html.HiddenFor(m => m.L_STATUS)
            @Html.HiddenFor(m => m.REF_NO)
            @Html.HiddenFor(m => m.SUBMIT)
            @Html.HiddenFor(m => m.APPROVE)
            @Html.HiddenFor(m => m.PAID)
            @Html.HiddenFor(m => m.EXPIRE)
            @Html.HiddenFor(m => m.UPDATED_BY)
            @Html.HiddenFor(m => m.TOTAL_FEE)

            if (Model.APPSTATUSID != (int)Enums.PAStausenum.CEOcheck && Model.APPSTATUSID != (int)Enums.PAStausenum.meeting)
            {
                @Html.HiddenFor(m => m.SubmitType)
            }

            @Html.HiddenFor(m => m.UploadRequiredDocids)
            @Html.HiddenFor(m => m.UploadAdditionalDocids)


            <div class="row">
                <div class="col-lg-3 col-md-6" id="licenseType">
                    <div class="form-group">
                        <div class="control-label">Jenis Lesen<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.APP_TYPE_ID, new SelectList(LicenseList, "Value", "Text"), new { @class = "form-control", onchange = "changeLicense()" })
                        @Html.ValidationMessageFor(m => m.APP_TYPE_ID)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3 col-md-6" id="approvalType" style="display:normal;">
                    <div class="form-group">
                        <div class="control-label">Jenis Kelulusan<span class="cfont">*</span></div>                       
                            @Html.DropDownListFor(m => m.MODE, new SelectList(ModeList, "Value", "Text"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.MODE)
                    </div>
                </div>
                <div class="col-lg-3 col-md-6" id="approvalDirector" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">Jenis Kelulusan</div>
                        <div class="well well-sm">Pengarah</div>
                        @Html.Hidden("MODE", 2, null)
                    </div>
                </div>
                <div class="col-lg-3 col-md-6" id="approvalCEO" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">Jenis Kelulusan</div>
                        <div class="well well-sm">Biasa</div>
                        @Html.Hidden("MODE", 3, null)
                    </div>
                </div>
                <div class="col-lg-3 col-md-6" id="approvalMeeting" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">Jenis Kelulusan</div>
                        <div class="well well-sm">Mesyuarat</div>
                        @Html.Hidden("MODE", 4, null)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-lg-3 col-md-6" id="sector" style="display:normal;">
                    <div class="form-group">
                        <div class="control-label">Kumpulan Kod Perniagaan<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.SectorID, new SelectList(sectorsList.OrderBy(x => x.SectorID), "SectorID", "SectorDesc"), "Pilih Kumpulan Kod Perniagaan", new { @class = "form-control" })
                    </div>
                </div>
            </div>

            

            <div class="row">
                <div class="col-sm-6" id="businessCode">
                    <div class="form-group">
                        <div class="control-label">Kod Perniagaan<span class="cfont">*</span></div>
                        @Html.DropDownList("BusinessCode", new SelectList(Model.selectedbusinessCodeList.OrderBy(x => x.text), "id", "text"), "Pilih Kod Perniagaan", new { @id = "businessCodeList", @class = "form-control", multiple = "true", onchange = "changeBussinesscode()" })
                        @Html.HiddenFor(model => model.BusinessCodeids)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-sm-10 col-lg-6">
                        <div class="control-label">Nama Penuh (Mykad/Paspot)<span class="cfont">*</span></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-10 col-lg-6">
                        @Html.DropDownList("Individual", new SelectList(Model.selectedIndividualList.OrderBy(x => x.text), "id", "text"), "Select  Mykad/Passport No", new { @id = "individualList", @class = "form-control", multiple = "true", onchange = "changeIndindividual()" })
                        @Html.HiddenFor(model => model.Individualids)
                        @Html.HiddenFor(model => model.newIndividualsList)
                    </div>
                    @if (Model.APP_ID == 0)
                    {
                        <div class="col-sm-2 col-lg-6">
                            <input type="button" class="btn btn-primary" value="Daftar Individu Baru" onclick='return AddIndividual();' />
                        </div>
                    }
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    <div class="col-sm-10 col-lg-6">
                        <div class="control-label">Nama Syarikat</div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-10 col-lg-6">
                        @Html.DropDownListFor(m => m.COMPANYID, new SelectList(companiesList, "CompanyID", "CompanyName"), "Select Company", new { @id = "companyList", @class = "form-control" })
                    </div>
                    @if (Model.APP_ID == 0)
                    {
                        <div class="col-sm-2 col-lg-6">
                            <input type="button" class="btn btn-primary" value="Daftar Syarikat Baru" onclick='addCompany();' />
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="form-group">
                        <div class="control-label">Jenis Perniagaan<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.BUSINESSTYPEID, new SelectList(businessTypeList.OrderBy(x => x.BT_DESC), "BT_ID", "BT_DESC"), "Pilih Jenis Perniagaan", new { @class = "form-control", @onchange = "businessTypeChange()" })
                    </div>
                </div>
            </div>
            <hr />

            <div class="row">
                <div class="col-lg-6 col-md-6" id="entmtGroup" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">Jenis Tempat Hiburan<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.E_GROUPID, new SelectList(entmtGroupList.OrderBy(x => x.E_GROUPID), "E_GROUPID", "E_G_DESC"), "Pilih Kategori", new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Alamat Premis Yang Dipohon<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.ADDRA1, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.ADDRA2, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.ADDRA3, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.ADDRA4, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Poskod<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.PCODEA, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Negeri<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.STATEA, new { @Value = "Wilayah Persekutuan Labuan", @class = "form-control" })
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Luas Premis<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.P_AREA, new { @class = "form-control allownumericwithdecimal" })
                        @Html.ValidationMessageFor(m => m.P_AREA)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Pemilikan Premis<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.P_OWN, new SelectList(PremiseOwnershipList, "Value", "Text"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.P_OWN)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label">Tempoh Sewaan Premis dari<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.START_RENT, "{0:dd\\/MMM\\/yyyy}", new { @class = "date-picker" })
                        @Html.ValidationMessageFor(m => m.START_RENT)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label">Hingga<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.STOP_RENT, "{0:dd\\/MMM\\/yyyy}", new { @class = "date-picker" })
                        @Html.ValidationMessageFor(m => m.STOP_RENT)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-md-10 col-lg-6">
                        <div class="control-label">Jenis Premis<span class="cfont">*</span></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-md-10 col-lg-3">
                        @Html.DropDownListFor(m => m.PREMISETYPEID, new SelectList(PremiseTypeList.OrderBy(x => x.PremiseTypeID), "PremiseTypeID", "PremiseDesc"), "Pilih jenis premis", new { @class = "form-control" })
                    </div>
                    @if (Model.APP_ID == 0)
                    {
                        <div class="col-md-2 col-lg-2">
                            <input type="button" class="btn btn-primary" value="Daftar Jenis Premis Baru" onclick='return addPremiseType();' />
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Tingkat</div>
                        @Html.TextBoxFor(m => m.FLOOR, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-md-12" id="RequiredDocument" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Dokumen Wajib   @if (Model.UserRollTemplate > 1)
                            {<span class="cfont">*</span>}
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblBusinessType"></table>
                    </div>
                </div>
                <div class="col-lg-12 col-md-12" id="AdditionalDocument" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Dokumen Tambahan @if (Model.UserRollTemplate > 1)
                            {<span class="cfont">*</span>}
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblAdditional"></table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12" id="RouteComments" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Ulasan Unit Teknikal/Jabatan Luar
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblRouteComments"></table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12" id="Comments" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Catatan
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblComments"></table>
                    </div>
                </div>
            </div>
            if (Model.UserRollTemplate == (int)Enums.RollTemplate.Director)
            {
                List<SelectListItem> supportList = new List<SelectListItem>();
                supportList.Add(new SelectListItem { Text = "Disyorkan", Value = "1" });
                supportList.Add(new SelectListItem { Text = "Tidak Disyorkan", Value = "0" });
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <div class="control-label">Keputusan Pengarah</div>
                            @Html.DropDownListFor(m => m.Supported, new SelectList(supportList, "Value", "Text"), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
            if (Model.APPSTATUSID == (int)Enums.PAStausenum.CEOcheck) // Awaiting CEO
            {
                List<SelectListItem> supportList = new List<SelectListItem>();
                supportList.Add(new SelectListItem { Text = "Diluluskan", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit });
                supportList.Add(new SelectListItem { Text = "Tidak Diluluskan", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected });
                supportList.Add(new SelectListItem { Text = "KIV", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnKIV });
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <div class="control-label">Keputusan KPE</div>
                            @Html.DropDownListFor(m => m.SubmitType, new SelectList(supportList, "Value", "Text"), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
            if (Model.APPSTATUSID == (int)Enums.PAStausenum.meeting) // Meeting
            {
                List<SelectListItem> supportList = new List<SelectListItem>();
                supportList.Add(new SelectListItem { Text = "Diluluskan", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit });
                supportList.Add(new SelectListItem { Text = "Tidak Diluluskan", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected });
                supportList.Add(new SelectListItem { Text = "KIV", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnKIV });
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <div class="control-label">Keputusan Mesyuarat</div>
                            @Html.DropDownListFor(m => m.SubmitType, new SelectList(supportList, "Value", "Text"), new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @if (Model.UserRollTemplate >= (int)Enums.RollTemplate.DeskOfficer && (Model.APPSTATUSID <= (int)Enums.PAStausenum.Pendingpayment) && (Model.MODE == 1) || Model.APPSTATUSID == (int)Enums.PAStausenum.LetterofnotificationApproved || Model.APPSTATUSID == (int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions || Model.APPSTATUSID == (int)Enums.PAStausenum.LetterofnotificationRejected)
                        {
                            <input type="button" class="btn btn-primary btSubmit" value="Tambah Catatan Dalam Surat Perakuan " onclick="AddCatatan();" />
                            <input type="button" class="btn btn-primary btSubmit" value="Cetak Surat Perakuan" id="btnLetter" name="btnSubmit" />
                        }
                        @if (Model.UserRollTemplate > (int)Enums.RollTemplate.Public && (Model.MODE == 1 && Model.APPSTATUSID <= (int)Enums.PAStausenum.submittedtoclerk) || Model.APPSTATUSID == (int)Enums.PAStausenum.LetterofnotificationApproved || Model.APPSTATUSID == (int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions)
                        {
                            <input type="button" class="btn btn-primary btSubmit" value="Fi Yang Perlu Dibayar" onclick="showPaymentsDuePopup();" />
                        }
                        @if (Model.UserRollTemplate > (int)Enums.RollTemplate.Public && Model.APPSTATUSID == (int)Enums.PAStausenum.Pendingpayment)
                        {
                            <input type="button" class="btn btn-primary btSubmit" value="Terima Bayaran" id="btnSubmitPaymentReceived" onclick="showPaymentsReceivedPopup();" />
                        }
                        @if (Model.UserRollTemplate != (int)Enums.RollTemplate.Clerk && Model.APPSTATUSID == (int)Enums.PAStausenum.LicenseGenerated && Model.MODE != 1)
                        {
                            // Add a button for showing License print
                            <input type="button" class="btn btn-primary btSubmit" value="Cetak Lesen" id="btnLicense" name="btnSubmit" />
                        }
                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Public || Model.UserRollTemplate == (int)Enums.RollTemplate.DeskOfficer)
                        {
                            if (Model.APPSTATUSID == 0 || Model.APPSTATUSID == (int)Enums.PAStausenum.draftcreated)
                            {
                                <input type="submit" class="btn btn-primary" onclick='frmSubmit(true); return false;' id="btnsubmitdraft" value="Simpan Draf " />
                                <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                            }
                        }

                        @*@if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                            {
                                <input type="submit" class="btn btn-primary btSubmit" value="Submit" onclick='frmSubmit(true); return false;' id="btnsubmit" />
                            }*@

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Clerk && (Model.APPSTATUSID >= (int)Enums.PAStausenum.submittedtoclerk && Model.APPSTATUSID <= (int)Enums.PAStausenum.unitroute) || Model.UserRollTemplate == (int)Enums.RollTemplate.Clerk && (Model.APPSTATUSID >= (int)Enums.PAStausenum.submittedtoclerk && Model.MODE == 1))
                        {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return showRouteUnitConfirmModal();'>Hantar ke Unit Teknikal/Jabatan Luar</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Hantar Ke Pengarah</button>
                        }
                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.RouteUnit && Model.APP_ID > 0)
                        {

                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Supervisor && Model.APP_ID > 0)
                        {

                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Director && (Model.APPSTATUSID == (int)Enums.PAStausenum.meeting || Model.APPSTATUSID == (int)Enums.PAStausenum.directorcheck))
                        {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Hantar</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Rejected();'>Kembali ke Supervisor</button>
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.CEO && Model.APP_ID > 0 && (Model.APPSTATUSID == (int)Enums.PAStausenum.CEOcheck))
                        {
                            <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Administrator && Model.APP_ID > 0)
                        {

                        }

                        <input type="button" class="btn btn-default" value="Kembali" onclick="back()" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Individual-->
<div id="showAddIndividual" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("AddIndividual", "Master", FormMethod.Post, new { name = "frmsaveIndividual", id = "frmsaveIndividual" }))
        {
            @Html.AntiForgeryToken()
            @Html.Hidden("id", Model.APP_ID)
            @Html.Hidden("appType", "Application")

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Masukkan Maklumat Individu Baru</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12 col-lg-6">
                            <div class="form-group">
                                <div class="control-label">Nama</div>
                                @Html.TextBox("Fname", null, new { @class = "form-control" })
                                <span class="text-danger BannerCodeVal"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-lg-6">
                            <div class="form-group">
                                <div class="control-label">Nombor MyKad / Nombor Paspot</div>
                                @Html.TextBox("MykadNo", null, new { @class = "form-control" })
                                <span class="text-danger LocationVal"></span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="Tambah" onclick="return SaveIndividual()" />
                        <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Company-->
<div id="showAddCompany" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("AddCompany", "Master", FormMethod.Post, new { name = "frmsaveCompany", id = "frmsaveCompany" }))
        {
            @Html.AntiForgeryToken()
            @Html.Hidden("id", Model.APP_ID)
            @Html.Hidden("appType", "Application")

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Masukkan Maklumat Syarikat Baru</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-sm-12 col-lg-6">
                            <div class="form-group">
                                <div class="control-label">Nama Syarikat</div>
                                @Html.TextBox("Cname", null, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 col-lg-6">
                            <div class="form-group">
                                <div class="control-label">Nombor Pendaftaran Syarikat</div>
                                @Html.TextBox("RegNo", null, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-primary" value="Tambah" onclick="return SaveCompany()" />
                        <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!--Add Notes in Letter-->
<div id="showCatatan" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("SaveCatatan", "Application", FormMethod.Post, new { name = "frmsaveCatatan", id = "frmsaveCatatan" }))
        {
            @Html.HiddenFor(m => m.APP_ID)
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Tambah Catatan</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-12 col-md-12">
                            <div class="form-group">
                                <div class="control-label">
                                    Masukkan Catatan baru
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12">
                            <div class="form-group">
                                <div class="control">
                                    @Html.TextAreaFor(m => m.newComment, new { @class = "form-control", rows = "5" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" value="Tambah" onclick="return SaveCatatan()" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                </div>
            </div>
        }
    </div>
</div>

<!--Upload Doc-->
<div id="uploadDocumentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        @using (Html.BeginForm("UploadDocument", "Application", FormMethod.Post, new { name = "frmuploadDocument", id = "frmuploadDocument", enctype = "multipart/form-data" }))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Upload Document</h4>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="preAppid" id="preAppid">
                    <input type="hidden" name="reqDocid" id="reqDocid">
                    <input type="hidden" name="addDocid" id="addDocid">
                    <input type="hidden" name="isReqDoc" id="isReqDoc">

                    <input type="file" id="DocumentFile" name="file" accept="application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint,text/plain, application/pdf, image/*" /><br />
                </div>
                <div class="modal-footer">
                    @if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.DeskOfficer)
                    {
                        <input type="button" class="btn btn-primary" onclick="return UploadDocument()" value="Upload" />
                    }
                    else
                    {
                        if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                        {
                            <input type="button" class="btn btn-primary" onclick="return UploadAttechment()" value="Upload" />
                        }
                    }
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        }
    </div>
</div>

@if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Clerk)
{
    <!--Route Unit modal-->
    <div id="routeUnitModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            @using (Html.BeginForm("AddRoute", "Application", FormMethod.Post, new { name = "frmsaveRoute", id = "frmsaveRoute" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("id", Model.APP_ID)
                @Html.Hidden("appType", "Application")
                @Html.Hidden("appID", (int)Enums.ApplicationTypeID.Application)

                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Senarai Unit Teknikal/Jabatan Luar</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="form-group">

                                <div class="col-lg-8 col-md-8">
                                    @Html.DropDownList("department", new SelectList(departmentList, "DepartmentID", "DepartmentDesc"), new { @class = "form-control" })
                                </div>
                                <div class="col-lg-2 col-md-2">
                                    <button type="button" id="AddDept" class="btn btn-primary">Tambah</button>
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12 col-md-12" id="RouteUnitTable" style="display:none;">
                                <div class="form-group">
                                    <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblRouteDepartments"></table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="return RoutePremiseApplication()">Hantar</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                    </div>
                </div>
            }
        </div>
    </div>
}

<!--approved/reject-->
<div id="approvedrejectModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        @using (Html.BeginForm("SaveComment", "Application", FormMethod.Post, new { name = "frmsaveComment", id = "frmsaveComment" }))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><lable id="lblheaderTitle"></lable></h4>
                </div>
                <div class="modal-body">
                    <textarea rows="5" cols="65" class="classOfSelector" id="txtComment" maxlength="255" autofocus="autofocus" placeholder="Comment here..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="return SaveComment()"><lable id="lblapprovedreject"></lable> </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        }
    </div>
</div>

<div id="myModalLicense" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Cetak Lesen</h4>
            </div>
            <div class="modal-body">
                <p><iframe id="ifrm" src="" height="500" width="850" frameborder="0"></iframe></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Tutup</button>
            </div>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Letter Details</h4>
            </div>
            <div class="modal-body">
                <p><iframe id="ifrm" src="" height="500" width="850" frameborder="0"></iframe></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="showPaymentsDue" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("SavePaymentDue", "Application", FormMethod.Post, new { name = "frmsavePaymentDue", id = "frmsavePaymentDue" }))
        {
            @Html.HiddenFor(m => m.APP_ID)
        <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Jumlah Yang Perlu Dibayar</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 col-sm-12">
                            <div class="form-group">
                                <div class="control-label">Jumlah Fi Bagi Semua Kod Perniagaan</div>
                                @Html.TextBox("totalDue", new { @class = "form-control" })
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" value="Hantar" onclick="return validatePaymentDue()" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                </div>
            </div>
        }
    </div>
</div>

<div id="showPaymentsReceived" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("SaveReceivedPayment", "Application", FormMethod.Post, new { name = "frmsaveReceivedPayment", id = "frmsaveReceivedPayment" }))
        {
            @Html.HiddenFor(m => m.APP_ID)
        <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Penerimaan Bayaran</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-3 col-sm-12">
                            <div class="form-group">
                                <div class="control-label">Bayaran untuk:</div>
                                @Model.REF_NO
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 col-sm-12">
                            <div class="form-group">
                                <div class="control-label">Jumlah bayaran</div>
                                @Model.AmountDue
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 col-sm-12">
                            <div class="form-group">
                                <div class="control-label">Bayaran dibuat oleh/untuk</div>
                                @Html.DropDownList("individualID", new SelectList(Model.selectedIndividualList.OrderBy(x => x.text), "id", "text"), "Select  Mykad/Passport No", new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" value="Hantar" onclick="return validateSavePayments()" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Tutup</button>
                </div>
            </div>
        }
    </div>
</div>
<!-- Add Premise Type-->
<div id="showAddPremiseType" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        @using (Html.BeginForm("AddPremiseType", "Master", FormMethod.Post, new { name = "frmsavePremiseType", id = "frmsavePremiseType" }))
        {
            @Html.AntiForgeryToken()
            @Html.Hidden("id", Model.APP_ID)
            @Html.Hidden("appType", "Application")

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Daftar Jenis Premis Baru</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 col-sm-12">
                            <div class="form-group">
                                <div class="control-label">Jenis Premis</div>
                                @Html.TextBox("PTypeDesc", null, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" value="Hantar" onclick="return savePremiseType()" />
                    <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                </div>
            </div>
        }
    </div>
</div>

<style type="text/css">
    label.error {
        color: red;
    }
</style>

@section scripts{
    <script>
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({dateFormat: 'dd/M/yy'});
        })

        $(document).ready(function () {
            $('#btnLicense').click(function () {
                $('.modal-body iframe').attr('src', "../Application/GeneratLicense?AppId=@Model.APP_ID");
                $('#myModalLicense').modal('show');
            });
        });


        var userRollTemplate = 0;
        var visibleGridColume = false;
        var visibleGridUploadColume = false;

        var requiredDocList = [];
        var addtionalDocList = [];

        var actionError = '@(TempData["ErrorMessage"])';
        if (actionError != null && actionError != "") {
            errorMessage(actionError);
        }

        $(function () {

            userRollTemplate = $("#UserRollTemplate").val();

            var success = '@(TempData["SuccessMessage"])';
            if (success != null && success != "") {
                successMessage(success);
            }

            var actionError = '@(TempData["ErrorMessage"])';
            if (actionError != null && actionError != "") {
                errorMessage(actionError);
            }

            if (userRollTemplate == 1 || userRollTemplate == 3 || userRollTemplate == 4) {
                visibleGridUploadColume = true;
            }
            if (userRollTemplate == 2) {
                visibleGridColume = true;
            }

            $("#businessCodeList").select2({ width: '100%' });
            $("#individualList").select2({ width: '100%' });
            $("#companyList").select2({ width: '100%', placeholder: "Pilih Syarikat" });

            AddRules();

            function formatBusinessCodes(data) {
                var r = data.text.split('~');
                var $result = $(
                    '<div class="row">' +
                        '<div class="col-md-2">' + r[1] + '</div>' +
                        '<div class="col-md-10">' + r[0] + '</div>' +
                    '</div>'
                );
                return $result;
            }

            function formatSelectionBusinessCodes(data) {
                var r = data.text.split('~');
                var $result = $(
                    '<span>' +
                        r[1] + ' | '  + r[0] +
                    '</span>'
                );
                return $result;
            }

            $("#businessCodeList").select2({
                placeholder: "Search for a Business Code",
                minimumInputLength: 0,
                width: '100%',
                templateResult: formatBusinessCodes,
                templateSelection: formatSelectionBusinessCodes,
                ajax: {
                    type: "POST",
                    url: encodeURI('@Url.Action("FillBusinessCode", "Application")'),
                    //Data: allows us to pass a parameter to the controller
                    data: function (query) {
                        //console.log(query)
                        return {
                            query: query.term,
                            selectedMode: $('#MODE').val(),
                            selectedSector:  $("#SectorID").val()
                        }
                    },
                    //processes the results from the JSON method and gives us the select list
                    processResults: function (data) {
                        //console.log(data)
                        return {
                            results: data
                        };
                    }
                }
            });


            function individualFormating(state) {
                if (!state.isNew) {
                    return state.text;
                }

                state.text = state.fullName + ' (' + state.passportNo +')';
                var $state = $(
                  '<span>' + state.text +'&nbsp;</span>'
                );
                if(state.isNew) {
                    var editLink = $(' <a href="javascript:void(0);">Edit</a>');
                    editLink.on('click', function() {
                        showIndividualModal(state);
                    });
                    $state.append(editLink);
                }
                return $state;
            }

            $("#individualList").select2({
                placeholder: "Select Full Name or Mykad/Passport No",
                minimumInputLength: 2,
                width: '100%',
                tags: true,
                tokenSeparators: [';'],
                templateSelection: individualFormating,
                createTag: function (params) {
                    var term = params.term;
                    var indexOfPassport = term.indexOf('(');
                    var fullName= '';
                    var passportNo = '';
                    if(indexOfPassport > 0) {
                        var endIndex = term.indexOf(')', indexOfPassport);
                        passportNo = endIndex > 0 ? term.substring(indexOfPassport + 1, endIndex) : term.substring(indexOfPassport + 1);
                        fullName = term.substring(0, indexOfPassport);
                    } else {
                        fullName = term;
                    }

                    return {
                        id: term,
                        text: fullName + ' (' + passportNo +')',
                        fullName: fullName,
                        passportNo: passportNo,
                        isNew: true
                    };
                },
                ajax: {
                    type: "POST",
                    url: encodeURI('@Url.Action("FillIndividual", "Application")'),
                    //Data: allows us to pass a parameter to the controller
                    data: function (query) {
                        //console.log(query)
                        return { query: query.term }
                    },
                    //processes the results from the JSON method and gives us the select list
                    processResults: function (data) {
                        //console.log(data)
                        return {
                            results: data
                        };
                    }
                }
            });

            var businessSelecteId = [];
            if ('@Model.BusinessCodeids' != null && '@Model.BusinessCodeids' != '') {
                var BussinessCodeIds = '@Model.BusinessCodeids';

                var arr = BussinessCodeIds.split(',');
                $.each(arr, function (index, value) {
                    businessSelecteId.push(value);
                });
                $('#businessCodeList').val(businessSelecteId);
                $('#businessCodeList').trigger('change');
            } else {
                businessSelecteId = [];
            }

            var individualSelecteId = [];
            if ('@Model.Individualids' != null && '@Model.Individualids' != '') {
                var individualIds = '@Model.Individualids';

                var arr = individualIds.split(',');
                $.each(arr, function (index, value) {
                    individualSelecteId.push(value);
                });
                $('#individualList').val(individualSelecteId);
                $('#individualList').trigger('change');
            } else {
                individualSelecteId = [];
            }

            if(@Model.BUSINESSTYPEID > 0)
            {
                $("#BusinessTypeID").val(@Model.BUSINESSTYPEID);
                bindTable();
            }

            if ('@Model.UploadRequiredDocids' != null && '@Model.UploadRequiredDocids' != '') {

                var UploadRequiredDocumentlist = '@Model.UploadRequiredDocids';

                var arr = UploadRequiredDocumentlist.split(',');
                $.each(arr, function (index, value) {
                    requiredDocList.push(value);
                });
            }

            if ('@Model.UploadAdditionalDocids' != null && '@Model.UploadAdditionalDocids' != '') {

                var UploadAdditionalDocumentlist = '@Model.UploadAdditionalDocids';

                var arr = UploadAdditionalDocumentlist.split(',');
                $.each(arr, function (index, value) {
                    addtionalDocList.push(value);
                });
            }

            $("#preAppid").val(@Model.APP_ID);

            $(".allownumericwithdecimal").on("keypress keyup blur", function (event) {
                $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
                if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which != 8 && event.which < 48 || event.which > 57) && (event.which == 37 || event.which == 39)) {
                    event.preventDefault();
                }
            });

            if(@Model.APP_ID > 0 && @Model.UserRollTemplate > 1) {
                loadComments();
            }
            if(@(Model.HasPADepSupp.ToString().ToLower()) === true)
            {
                loadRouteComments();
            }
        });

        function frmSubmit(isdraft) {
            $("#IsDraft").val(isdraft);
            if (validatePremiseApplication(isdraft)) {
                $("#frmPremiseApplication").submit();
            }
        }

        function validatePremiseApplication(isdraft) {
            $("#UploadRequiredDocids").val(requiredDocList);
            $("#UploadAdditionalDocids").val(addtionalDocList);

            AdditionalChecked();

            RequiredDocument();

            if (!$("#frmPremiseApplication").valid()) {
                return false;
            }else if ($('#BusinessCodeids').val() == "") {
                alert("Please select Business Code");
                return false;
            }else if (userRollTemplate > 1 && $('#Individualids').val() == "") {
                alert("Please select Mykad/Passport No");
                return false;
            } else if (userRollTemplate == 1 && !isdraft && $('.lablereqdocument').length != requiredDocList.length) {
                alert("Please Upload all Required Document");
                return false;
            }
            else if (userRollTemplate == 1 && !isdraft && $('.lableadddocument').length != addtionalDocList.length) {
                alert("Please Upload all Additional Document");
                return false;
            }
            else if (userRollTemplate > 1 && $('.chkreqdoc:checked').length != $('.chkreqdoc').length) {
                alert("Please select all checkbox for Required Document");
                return false;
            }else if (userRollTemplate > 1 && $('.chkAdddoc:checked').length != $('.chkAdddoc').length){
                alert("Please select all checkbox for Additional Document");
                return false;
            }else {
                var individuals = $("#individualList").select2('data');
                if (individuals) {
                    var newIndividuals = [];
                    for(var i =0; i< individuals.length; i++) {
                        var ind = individuals[i];
                        if(ind.isNew) {
                            newIndividuals.push({ fullName: ind.fullName, passportNo: ind.passportNo });
                        }
                    }
                    if(newIndividuals.length >0) {
                        $("#newIndividualsList").val(JSON.stringify(newIndividuals));
                    }
                }
            }
            return true;
        }

        function changeBussinesscode() {
            $('#BusinessCodeids').val($('#businessCodeList').val());
            bindAdditionalTable();
            checkButtonState();
        }

        function changeIndindividual() {
            var individuals = $("#individualList").select2('data');
            var newIndividuals = [];
            for(var i =0; i< individuals.length; i++) {
                var ind = individuals[i];
                if(!ind.isNew) {
                    newIndividuals.push(ind.id);
                }
            }
            $('#Individualids').val(newIndividuals.join(','));
        }

        function back() {
            var link = '@Url.Action("Application", "Application")';
            window.location.href = link;
        }

        

        function changeLicense() {
            if ($("#APP_TYPE_ID").val() == 1) {
                $('#approvalType').show();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').hide();
                $('#sector').show();
                $('#businessCode').show();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 2){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').show();
                $('#approvalMeeting').hide();
                $("#MODE").val(3);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 3){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').show();
                $("#MODE").val(4);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 4){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').show();
                $("#MODE").val(4);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 5){
                $('#approvalType').hide();
                $('#approvalDirector').show();
                $('#approvalCEO').hide();
                $('#approvalMeeting').hide();
                $("#MODE").val(2);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 6){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').show();
                $('#approvalMeeting').hide();
                $("#MODE").val(3);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 7){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').show();
                $('#approvalMeeting').hide();
                $("#MODE").val(3);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 8){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').show();
                $("#MODE").val(4);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 9){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').show();
                $("#MODE").val(4);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').hide();
            }
            else if ($("#APP_TYPE_ID").val() == 10){
                $('#approvalType').hide();
                $('#approvalDirector').hide();
                $('#approvalCEO').hide();
                $('#approvalMeeting').show();
                $("#MODE").val(4);
                $('#sector').hide();
                $('#businessCode').hide();
                $('#entmtGroup').show();
            }
        }

        function businessTypeChange() {
            if ($("#BUSINESSTYPEID").val() > 0) {
                bindTable();
            }
            checkButtonState();
        }

        function bindDownload(attechmentID) {
            if (attechmentID > 0) {
                window.location.href = "@Url.Action("Download", "Application")" + "?attechmentID=" + attechmentID + "&premiseId=" + @Model.APP_ID;
            }
        }


        function bindSearch() {
            var param = {};
            param["businessTypeID"] = $("#BUSINESSTYPEID").val();

            if ($("#APP_ID").val() > 0) {
                param["ApplicationID"] = $("#APP_ID").val();
            } else {
                param["ApplicationID"] = "";
            }

            return param;
        }

        function bindTable() {

            $('#RequiredDocument').show();
            if ($.fn.DataTable.isDataTable("#tblBusinessType")) {
                $('#tblBusinessType').dataTable().fnDestroy();
            }

            table = $("#tblBusinessType").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "bPaginate": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("RequiredDocument", "Application")',
                    type: "POST",
                    data: bindSearch()
                },
                "columns": [
                    {
                        "title": "Disertakan?",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                            appendstring += '<div class="checkbox"> <label for="chkdoc_' + row["RD_ID"] + '"> <input id="chkdoc_' + row["RD_ID"] + '"  value="' + row["RD_ID"] + '" class="chkreqdoc" type = "checkbox" onclick = "RequiredDocument();"  ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                            return appendstring
                        },
                        width: "7%",
                        "orderable": false,
                        "visible": visibleGridColume,
                    },
                    { "title": "Jenis Dokumen", "data": "RD_DESC", "orderable": false },
                    {
                        "title": "Muat Naik",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                            if (userRollTemplate == 1) {
                                appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RD_ID"] + '" onclick="RDModel(' + row["RD_ID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                            }
                            else if (userRollTemplate > 2) {
                                appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RD_ID"] + '" onclick="RDModel(' + row["RD_ID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                            }
                            return appendstring
                        },
                        width: "7%",
                        "orderable": false,
                        "visible": visibleGridUploadColume,
                    },
                    {
                        "title": "Nama Fail",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';

                            if (visibleGridUploadColume) {
                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank"   href="javascript:void(0);" title="Document" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lablereqdocument" style="cursor: pointer;" id="lblreqAttachment_' + row["RD_ID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                                } else {
                                    appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lablereqdocument"  id="lblreqAttachment_' + row["RD_ID"] + '"> </label> </a>';
                                }

                            } else {
                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["APP_ID"] + ');">' + row["AttachmentFileName"] + '</a>';
                                } else {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                                }
                            }
                            return appendstring
                        },
                        "orderable": false,
                        "visible": visibleGridUploadColume,
                    }
                ]
            });
        }

        function bindSearchAdditional() {
            var param = {};
            param["BusinessCodeids"] = $("#BusinessCodeids").val();

            if ($("#APP_ID").val() > 0) {
                param["premiseApplicationID"] = $("#APP_ID").val();
            } else {
                param["premiseApplicationID"] = "";
            }

            return param;
        }

        function bindAdditionalTable() {

            $('#AdditionalDocument').show();
            if ($.fn.DataTable.isDataTable("#tblAdditional")) {
                $('#tblAdditional').dataTable().fnDestroy();
            }

            table = $("#tblAdditional").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "bPaginate": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("AdditionalDocument", "Application")',
                    type: "POST",
                    data: bindSearchAdditional()
                },
                "columns": [
                    {
                        "title": "Disertakan?",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                            if (userRollTemplate > 1) {
                                appendstring += '<div class="checkbox"> <label for="chkAdddoc_' + row["AdditionalDocID"] + '"> <input id="chkAdddoc_' + row["AdditionalDocID"] + '" value="' + row["AdditionalDocID"] + '" class="chkAdddoc" type = "checkbox" onclick="AdditionalChecked();" ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                            }
                            return appendstring
                        },
                        "orderable": false,
                        width: "7%",
                        "visible": visibleGridColume,
                    },
                    { "title": "Jenis Dokumen", "data": "DocDesc", "orderable": false },
                    {
                        "title": "Muat Naik",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                            if (userRollTemplate == 1) {
                                appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["AdditionalDocID"] + '" onclick="AdditionalModel(' + row["AdditionalDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                            } else if (userRollTemplate > 2) {
                                appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["AdditionalDocID"] + '" onclick="AdditionalModel(' + row["AdditionalDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                            }
                            return appendstring
                        },
                        "orderable": false,
                        width: "7%",
                        "visible": visibleGridUploadColume,
                    },
                    {
                        "title": "Nama Fail",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';

                            if (visibleGridUploadColume) {

                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lableadddocument" style="cursor: pointer;"  id="lbladdAttachment_' + row["AdditionalDocID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                                } else {
                                    appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lableadddocument"  id="lbladdAttachment_' + row["AdditionalDocID"] + '"> </label> </a>';
                                }

                            } else {
                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["APP_ID"] + ');">' + row["AttachmentFileName"] + '</a>';
                                } else {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                                }
                            }

                            return appendstring
                        },
                        "orderable": false,
                    }
                ]
            });
        }

        function RequiredDocument() {

            var RequiredArray = [];
            $('.chkreqdoc').each(function () {
                if ($(this).is(":checked")) {
                    RequiredArray.push($(this).val());
                }
            });
            $("#RequiredDocIds").val(RequiredArray);

            checkButtonState();
        }

        function checkButtonState() {
            var isAddtional = false;
            if ($('.chkAdddoc:checked').length == $('.chkAdddoc').length) {
                isAddtional = true;
            }

            var isDocument = false;
            if ($('.chkreqdoc:checked').length == $('.chkreqdoc').length) {
                isDocument = true;
            }

            if (isAddtional && isDocument) {
                $('.btSubmit').show();
            } else {
                $('.btSubmit').hide();
            }
        }

        function AdditionalChecked() {

            var AdditionalArray = [];
            $('.chkAdddoc').each(function () {
                if ($(this).is(":checked")) {
                    AdditionalArray.push($(this).val());
                }
            });
            $("#AdditionalDocIds").val(AdditionalArray);

            checkButtonState();
        }

        function RequiredDocumentModel(Requiredid) {
            $("#reqDocid").val(Requiredid);
            $("#addDocid").val("0");
            $('#isReqDoc').val("1");
            $('#uploadDocumentModal').modal('show');
        }

        function AdditionalModel(Additionalid) {
            $("#reqDocid").val("0");
            $("#addDocid").val(Additionalid);
            $('#isReqDoc').val("0");
            $('#uploadDocumentModal').modal('show');
        }

        var strValidateFileFormate = '@TradingLicense.Infrastructure.ProjectConfiguration.UploadFileFormat';
        var _validFileExtensions = [];
        _validFileExtensions = strValidateFileFormate.split(",");

        function UploadDocument(){

            if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

                var data = new FormData();
                var files = $("#DocumentFile").get(0).files;

                if (files.length > 0) {
                    data.append("DocumentFile", files[0]);
                }

                data.append("APP_ID", @Model.APP_ID);
                data.append("reqDocid", $("#reqDocid").val());
                data.append("addDocid", $("#addDocid").val());
                data.append("isReqDoc", $("#isReqDoc").val());

                var ajaxRequest = $.ajax({
                    type: "POST",
                    url: '@Url.Action("UploadDocument", "Application")',
                    contentType: false,
                    processData: false,
                    data: data,
                    async: false,
                    success: function (result) {
                        if (result != null) {
                            $("#DocumentFile").val("");
                            if (result.status == 1) {
                                successMessage(result.message);

                                if ($("#isReqDoc").val() > 0) {
                                    bindTable();
                                } else {
                                    bindAdditionalTable();
                                }
                            }
                            else {
                                errorMessage(result.message);
                            }
                        }
                        $("#uploadDocumentModal").modal('hide');
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        errorMessage(xhr.responseText);
                    }
                });

            } else {
                alert("Please Select Valid File");
            }
        }

        function UploadAttechment(){

            if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

                var data = new FormData();
                var files = $("#DocumentFile").get(0).files;

                if (files.length > 0) {
                    data.append("DocumentFile", files[0]);
                }

                data.append("reqDocid", $("#reqDocid").val());
                data.append("addDocid", $("#addDocid").val());
                data.append("isReqDoc", $("#isReqDoc").val());

                var ajaxRequest = $.ajax({
                    type: "POST",
                    url: '@Url.Action("UploadAttechment", "Application")',
                    contentType: false,
                    processData: false,
                    data: data,
                    async: false,
                    success: function (result) {
                        if (result != null) {
                            $("#DocumentFile").val("");
                            if (result.status == 1) {
                                successMessage("Document Upload Successfully");

                                console.log(result.result);
                                if ($("#isReqDoc").val() > 0) {
                                    var lblreqAttachment = "lblreqAttachment_" + $("#reqDocid").val();
                                    $('.lablereqdocument').each(function () {
                                        if ($(this).attr('id') == lblreqAttachment) {
                                            $("#" + lblreqAttachment).html(result.result.AttachmentName);
                                            RequiredDocumentDublicateCheck(result.result.RequiredDocID, result.result.AttachmentID);
                                        }
                                    });
                                } else {
                                    var lbladdAttachment = "lbladdAttachment_" + $("#addDocid").val();
                                    $('.lableadddocument').each(function () {
                                        if ($(this).attr('id') == lbladdAttachment) {
                                            $("#" + lbladdAttachment).html(result.result.AttachmentName);
                                            AdditionalDocumentDublicateCheck(result.result.AdditionalDocID, result.result.AttachmentID)
                                        }
                                    });
                                }
                            }
                            else {
                                errorMessage(result.message);
                            }
                        }
                        $("#uploadDocumentModal").modal('hide');
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        errorMessage(xhr.responseText);
                    }
                });

            } else {
                alert("Please Select Valid File");
            }
        }

        function RequiredDocumentDublicateCheck(RequiredDocID, AttachmentID) {
            var itemfound = 0;
            var itemFoundbool = false;

            for (var i = 0; i < requiredDocList.length; i++) {
                var doc = requiredDocList[i].split(',');
                var document = doc[0].split(':');
                if (document[0] == RequiredDocID ) {
                    itemfound = i;
                    itemFoundbool = true;
                    i = requiredDocList.length+1;
                }
            }

            if (itemFoundbool) {
                requiredDocList.splice(itemfound, 1);
            }

            var requiredDocument = RequiredDocID + ":" + AttachmentID;
            requiredDocList.push(requiredDocument);
        }

        function AdditionalDocumentDublicateCheck(AdditionalDocID, AttachmentID) {
            var itemfound = 0;
            var itemFoundbool = false;

            for (var i = 0; i < addtionalDocList.length; i++) {
                var doc = addtionalDocList[i].split(',');
                var document = doc[0].split(':');
                if (document[0] == AdditionalDocID) {
                    itemfound = i;
                    itemFoundbool = true;
                    i = addtionalDocList.length + 1;
                }
            }

            if (itemFoundbool) {
                addtionalDocList.splice(itemfound, 1);
            }

            var additionaDocument = AdditionalDocID + ":" + AttachmentID;
            addtionalDocList.push(additionaDocument);
        }

        function AddRules()
        {
            //validation implementation will go here.
            $("#frmsaveComment").validate({
                rules: {
                    txtComment: {
                        required: true
                    }
                }
            });
        }

        function Approvedreject(name) {
            if (name == "approved") {
                $("#lblapprovedreject").html("Approve");
                $("#txtComment").rules("remove", "required");
            }
            else {
                AddRules();
                $("#lblapprovedreject").html("Reject");
                $("#txtComment").rules("add", "required");
            }
            $("#lblheaderTitle").html("Add Comment");
            $('#approvedrejectModal').modal('show');
        }

        function SaveComment() {

            if (!$("#frmsaveComment").valid()) {
                return false;
            } else {

                var data = new FormData();
                data.append("APP_ID", @Model.APP_ID);
                data.append("comment", $("#txtComment").val());

                if ($("#lblapprovedreject").html() == "Approve") {
                    data.append("approveRejectType", "Approve");
                } else {
                    data.append("approveRejectType", "Reject");
                }

                var ajaxRequest = $.ajax({
                    type: "POST",
                    url: '@Url.Action("SaveComment", "Application")',
                    contentType: false,
                    processData: false,
                    data: data,
                    async: false,
                    success: function (result) {
                        if (result != null) {
                            $("#txtComment").val("");
                            if (result.status == 1) {
                                successMessage(result.message);
                                back();
                            }
                            else {
                                errorMessage(result.message);
                            }
                        }
                        $("#approvedrejectModal").modal('hide');
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        errorMessage(xhr.responseText);
                    }
                });

            }
        }

        function loadComments() {
            $('#Comments').show();
            if ($.fn.DataTable.isDataTable("#tblComments")) {
                $('#tblComments').dataTable().fnDestroy();
            }

            var data = { "APP_ID": @Model.APP_ID };

            table = $("#tblComments").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 10,
                "processing": true,
                "serverSide": true,
                "responsive": true,
                "bPaginate": true,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("PremiseComments", "Application")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    {
                        "targets": 0,
                        "searchable": false,
                        "orderable": false,
                        "title": "No.",
                        "data": null,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "title": "Ulasan", "orderable": false, "data": "Comment" },
                    { "title": "Pengulas", "orderable": false, "data": "FullName" },
                    { "title": "Ulasan dibuat pada", "data": "CommentDate", render: renderDateTime },
                    {
                        "title": "Tindakan",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';

                            if (data['UsersID'] == '@(ProjectSession.User.UsersID)') {
                                appendstring += '<a  href="@Url.Action("AddCatatan", "Application")?Id=' + row["APP_ID"] + '" title="Ubah"> <img src="@Url.Content("~/images/edit.png")" alt="Edit" /></a>&nbsp; ';
                                appendstring += '<a href="javascript:void(0);" data-id="' + row["PACommentID"] + '" onclick="bindDelete(this);" title="Padam"><img src="@Url.Content("~/images/delete.png")" alt="Delete" /></a>';
                            }
                            return appendstring
                        },
                        "width": "100px",
                        "orderable": false,
                        "class": "action-icons"
                    }
                ]
            });
        }

        function bindDelete(item) {
            var x = confirm("Are you sure you want to delete?");
            if (x) {
                $.ajax({
                    type: "POST",
                    url: encodeURI('@Url.Action("DeleteComment", "Application")'),
                    data: { "Id": $(item).attr('data-id') },
                    cache: false,
                    dataType: 'json',
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.success) {
                            bindTable();
                            successMessage(data.message);
                        }
                        else {
                            successMessage(data.message);
                        }
                    },
                    error: function (jqXHR, exception, errMsg) {
                    }
                });
            }
        }

        function loadRouteComments() {
            $('#RouteComments').show();
            if ($.fn.DataTable.isDataTable("#tblRouteComments")) {
                $('#tblRouteComments').dataTable().fnDestroy();
            }

            var data = { "APP_ID": @Model.APP_ID };

            table = $("#tblRouteComments").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "bPaginate": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("PremiseRouteComments", "Application")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    {
                        "targets": 0,
                        "searchable": false,
                        "orderable": false,
                        "title": "No.",
                        "data": null,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "title": "Ulasan",
                        "orderable": false,
                        "data": "Comment"
                    },
                    {
                        "title": "Nama Unit Teknikal/Jabatan Luar",
                        "orderable": false,
                        "data": "DepartmentDesc"
                    },
                    {
                        "title": "Keputusan",
                        "orderable": false,
                        "data": "IsSupported",
                        "render": function (data, type, row) {
                            if (data) {
                                return '<label class="label label-success">Tiada Halangan</label>';
                            }
                            else {
                                return '<label class="label label-danger">Ada Halangan</label>';
                            }
                        }
                    },
                    {
                        "title": "Diulas oleh",
                        "orderable": false,
                        "data": "FullName"
                    },
                    { "title": "Tarikh", "data": "SubmittedDate", "width": "150px", render: renderDateTime },
                ]
            });
        }

        function del(ob,param){
            console.log($(ob).attr("data-id"));
            console.log("#"+param+$(ob).attr("data-id"));
            //$("#"+param+$(ob).attr("data-id")).remove();

            $("#"+param+$(ob).attr("data-id")).remove();//hidden
            $(ob).closest('tr').remove();//row
            //$(this).remove();

        }

        function showRouteUnitConfirmModal() {
            //console.log("pop");
            $("#AddDept").click( function(){
                //console.log("clicked");
                var dept_id = $("#department").val();
                var dept = $("#department option:selected").text();
                var ct = $("#tblRouteDepartments tbody").children().length + 1;

                console.log($("#dept_"+dept_id).val());

                if($("#dept_"+dept_id).length == 0){
                    //console.log("--> "+$("#tblRouteDepartments tbody").children().length);
                    $("#tblRouteDepartments").append('<input type="hidden" value="'+ dept_id + '" id="dept_'+dept_id+'" name="DeptId[]"/>');
                    $("#tblRouteDepartments").append('<tr role="row" class="odd"><td>'+dept+'</td><td class=" action-icons"><a href="#"  onclick="del(this,\'dept_\');"  data-id="'+dept_id+'" class="del" title="Padam"><img src="/images/delete.png" alt="Delete"></a></td></tr>');
                }


            });
            if(validatePremiseApplication()) {
                $('#routeUnitModal').modal('show');
                $('#RouteUnitTable').show();
                if ($.fn.DataTable.isDataTable("#tblRouteDepartments")) {
                    $('#tblRouteDepartments').dataTable().fnDestroy();
                }

                var data = { "businessCodeids": $('#BusinessCodeids').val() };

                table = $("#tblRouteDepartments").dataTable({
                    "lengthChange": true,
                    "searching": false,
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "bPaginate": false,
                    "bInfo": false,
                    "orderMulti": false,
                    "ajax": {
                        url: '@Url.Action("FillRouteDepartments", "Application")',
                        type: "POST",
                        data: data
                    },
                    "columns": [
                        { "title": "Nama Jabatan", "orderable": true, "data": "DepartmentDesc" },
                        {
                            "title": "Padam",
                            "data": null,
                            "render": function (data, type, row) {
                                var appendstring = '';
                                appendstring += '<input type="hidden" id="dept_'+row["DepartmentID"]+'" value="'+ row["DepartmentID"] + '" name="DeptId[]"/>';
                                // appendstring += '<a href="javascript:void(0);" class="delDept" data-id="' + row["DepartmentID"] +'" title="Padam"><img src="@Url.Content("~/images/delete.png")" alt="Delete" /></a>';
                                appendstring += '<a href="#" onclick="del(this,\'dept_\');" class="delDept" data-id="' + row["DepartmentID"] +'" title="Padam"><img src="@Url.Content("~/images/delete.png")" alt="Delete" /></a>';
                                return appendstring
                            },
                            "width": "100px",
                            "orderable": false,
                            "class": "action-icons"
                        }

                    ]
                });
            }
            return false;
        }

        function showPaymentsDuePopup() {

            var data = new FormData();
            data.append("APP_ID", @Model.APP_ID);


            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("GetPaymentDue", "Application")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    $("#totalDue").val(0);
                    $("#totalfee").val(0);
                    if (result != null) {
                        $("#totalDue").val(result.totalDue);
                        $("#totalfee").val(result.totalfee);
                    }
                    $("#showPaymentsDue").modal('show');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        }

        function showPaymentsReceivedPopup() {
            $("#showPaymentsReceived").modal('show');
        }

        function validatePaymentDue() {
            var due = $('#totalDue').val();
            if(due === '' || isNaN(due)) {
                alert('Please enter valid Amount of due');
                return false;
            }
            if(parseFloat(due) <= 0) {
                var confirmed = confirm('The value of amount due seems to be less than or equal to zero, Please confirm if you want to update the same');
                return confirmed;
            }
            return true;
        }

        function validateSavePayments() {
            if($('#individualID').val() === '') {
                alert('Please select individual who has paid for this application');
                return false;
            }
            return true;
        }

        function RoutePremiseApplication() {
            $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnRouteSubmit');
            $("#frmsaveRoute").submit();
            $("#frmPremiseApplication").submit();
            return false;
        }

        function Approved() {
            $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit');
            $("#frmPremiseApplication").submit();
            return false;
        }

        function Rejected() {
            $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected');
            $("#frmPremiseApplication").submit();
            return false;
        }


        $(document).ready(function () {
            hideLetterDropDown();
            $('#btnLetter').click(function () {
                $('.modal-body iframe').attr('src', "../Application/GenerateLetter?AppId=@Model.APP_ID");
                $('#myModal').modal('show');
            });
        });

        function hideLetterDropDown()
        {
            if($('#btnLetter') != null && $('#btnLetter').length)
            {
                $('#btnLetter').show();
                $('#btnLetter').css('visibility', 'visible');
                if(!($('#Mode').val() == 1 || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationApproved) || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions) || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationRejected)))
                {
                    $('#btnLetter').hide();
                }
            }
        }

        function AddIndividual() {
            $("#showAddIndividual").modal('show');
        }

        function addCompany() {
            $("#showAddCompany").modal('show');
        }

        function SaveIndividual(){
            $("frmsaveIndividual").submit();
        }

        function SaveCompany(){
            $("frmsaveCompany").submit();
        }

        function AddCatatan() {
            $("#showCatatan").modal('show');
        }

        function addPremiseType() {
            $("#showAddPremiseType").modal('show');
        }

        function savePremiseType(){
            $("frmsavePremiseType").submit();
        }
    </script>


}
