@model TradingLicense.Model.BannerApplicationModel
@using AutoMapper;
@using TradingLicense.Infrastructure;
@using TradingLicense.Web.Classes;
@{
    ViewBag.Title = "ManageBannerApplication";
}
@{
    int? userRoleSession= TradingLicense.Infrastructure.ProjectSession.User.RoleTemplateID;

    List<TradingLicense.Model.CompanyModel> companyList = new List<TradingLicense.Model.CompanyModel>();
    List<TradingLicense.Model.IndividualModel> individualList = new List<TradingLicense.Model.IndividualModel>();
    List<TradingLicense.Model.BannerCodeModel> bannerCodeList = new List<TradingLicense.Model.BannerCodeModel>();
    List<TradingLicense.Model.LocationModel> locationList = new List<TradingLicense.Model.LocationModel>();

    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {
        var individuals = ctx.Individuals.ToList();
        individualList = Mapper.Map<List<TradingLicense.Model.IndividualModel>>(individuals);

        var companies = ctx.Companies.ToList();
        companyList = Mapper.Map<List<TradingLicense.Model.CompanyModel>>(companies);

        var bannerCodes = ctx.BannerCodes.ToList();
        bannerCodeList = Mapper.Map<List<TradingLicense.Model.BannerCodeModel>>(bannerCodes);

        var locations = ctx.Locations.ToList();
        locationList = Mapper.Map<List<TradingLicense.Model.LocationModel>>(locations);
    }

    List<SelectListItem> periodList = new List<SelectListItem>();
    periodList.Add(new SelectListItem { Text = "Tahun", Value = "1" });
    periodList.Add(new SelectListItem { Text = "Bulan", Value = "2" });
    periodList.Add(new SelectListItem { Text = "Minggu", Value = "3" });
    periodList.Add(new SelectListItem { Text = "Hari", Value = "4" });

    List<SelectListItem> supportList = new List<SelectListItem>();
    supportList.Add(new SelectListItem { Text = "Lulus", Value = "1" });
    supportList.Add(new SelectListItem { Text = "Tidak Lulus", Value = "0" });
}
<div id="divMessage"></div>
<div class="card">
    <div class="header">
        <h4 id="headerTitle">Butir-Butir Pemohon Lesen Iklan</h4>
    </div>
    <div class="body">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmBannerApplication", id = "frmBannerApplication" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.BannerApplicationID)
            @Html.HiddenFor(m => m.UsersID)
            @Html.HiddenFor(m => m.UserRollTemplate)
            @Html.HiddenFor(m => m.RequiredDocIds)
            @Html.HiddenFor(m => m.IsDraft)
            @Html.HiddenFor(m => m.AppStatusID)
            @Html.HiddenFor(m => m.Fee)
            @Html.HiddenFor(m => m.SubmitType)
            

            <div class="row">
                <div class="col-sm-12 col-lg-6">
                    <div class="form-group">
                        <div class="control-label">
                            Nama Pemohon
                            <span class="cfont">*</span>
                        </div>
                        @Html.DropDownListFor(m => m.IndividualID, new SelectList(individualList, "IndividualID", "FullName"), "Select  Mykad/Passport No", new { @id = "individualList", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.IndividualID)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 col-lg-6">
                    <div class="form-group">
                        <div class="control-label">Nama Perniagaan (Jika ada)</div>
                        @Html.DropDownListFor(m => m.CompanyID, new SelectList(companyList, "CompanyID", "CompanyName"), "Select Company", new { @id = "companiesList", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CompanyID)
                    </div>
                </div>
            </div>
            <div class="header">
                <h4 id="headerTitle">Butir-Butir Iklan</h4>
            </div>
            <br />
            if (Model.totalObjects == 0)
            {
                <div class="row">
                    <div class="col-sm-12 col-lg-6">
                        <div class="form-group">
                            <div class="control-label">Kod Iklan</div>
                            @Html.DropDownListFor(m => m.BannerCodeID, new SelectList(bannerCodeList, "BannerCodeID", "BannerCodeDesc"), new { @class = "form-control" })
                            <span class="text-danger BannerCodeVal"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-lg-6">
                        <div class="form-group">
                            <div class="control-label">Lokasi Dipohon</div>
                            @Html.DropDownListFor(m => m.LocationID, new SelectList(locationList, "LocationID", "LocationDesc"), new { @class = "form-control" })
                            <span class="text-danger LocationVal"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-lg-6">
                        <div class="form-group">
                            <div class="control-label">Saiz Iklan Dipohon (meter persegi)</div>
                            @Html.TextBoxFor(m => m.BSize, new { @id = "bsize", @class = "form-control allownumericwithdecimal" })
                            <span class="text-danger SizeVal"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-lg-6">
                        <div class="form-group">
                            <div class="control-label">Bilangan Iklan</div>
                            @Html.TextBoxFor(m => m.BQuantity, "1", new { @class = "form-control allowinteger" })
                            <span class="text-danger quantityVal"></span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-12 col-lg-12">
                        <div class="form-group">
                            <table cellspacing="0" class="table table-hover table-bordered responsive" style="width:100%" id="BannerObject"></table>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-lg-6">
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" onclick='return AddBannerObject();'>Tambah Iklan</button>
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-lg-12 col-md-12" id="RequiredDocument" style="display:none;">
                    <div class="form-group">
                        <div class="header">
                            <h4 id="headerTitle">Senarai Dokumen Wajib</h4>
                        </div>
                        <br />
                        <table cellspacing="0" class="table table-hover table-bordered responsive" style="width:100%" id="tblBusinessType"></table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Yuran Pemprosesan (RM)</div>
                        @Html.TextBoxFor(m => m.ProcessingFee, new { @Value = 25, @class = "form-control allownumericwithdecimal" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12" id="Comments" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Ulasan
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblComments"></table>
                    </div>
                </div>
            </div>
            if (Model.UserRollTemplate > 1)
            {
                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control-label">
                                Masukkan Catatan Baru
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control">
                                @Html.TextAreaFor(m => m.newComment, new { @class = "form-control", rows = "5" })
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @if (Model.UserRollTemplate > (int)Enums.RollTemplate.Public && Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApproved || Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions )
                        {
                            <input type="button" class="btn btn-primary" value="Cetak Surat Perakuan" id="btnLetter" name="btnSubmit" />
                        }
                        @if (Model.UserRollTemplate > (int)Enums.RollTemplate.Public && Model.AppStatusID >= (int)Enums.PAStausenum.LetterofnotificationApproved && Model.AppStatusID < (int)Enums.PAStausenum.Pendingpayment)
                        {
                            <input type="button" class="btn btn-primary" value="Public Signed Letter" id="btnGetPaymentDue" onclick="showPaymentsDuePopup();" />
                        }
                        @if (Model.UserRollTemplate > (int)Enums.RollTemplate.Public && Model.AppStatusID == (int)Enums.PAStausenum.Pendingpayment)
                        {
                            <input type="button" class="btn btn-primary" value="Submit Payment" id="btnSubmitPaymentReceived" onclick="showPaymentsReceivedPopup();" />
                        }
                        @if (Model.AppStatusID >= (int)Enums.PAStausenum.Paid)
                        {
                            <input type="button" class="btn btn-primary" value="Cetak Lesen" id="btnLicense" name="btnSubmit" />
                        }
                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Public || Model.UserRollTemplate == (int)Enums.RollTemplate.DeskOfficer)
                        {
                            if (Model.AppStatusID == 0 || Model.AppStatusID == (int)Enums.PAStausenum.draftcreated)
                            {
                                if (Model.totalObjects == 0)
                                {
                                <input type="submit" class="btn btn-primary" onclick='frmSubmit(true); return false;' id="btnsubmitdraft" value="Simpan Draf " name="btnSubmit" />
                                }
                                <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' name="btnSubmit" />
                                //<input type="submit" class="btn btn-primary" value="Validate" onclick="validate(); return false;" />
                            }
                        }

                        @*@if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                            {
                                <input type="submit" class="btn btn-primary btSubmit" value="Submit" onclick='frmSubmit(true); return false;' id="btnsubmit" />
                            }*@

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Clerk && Model.BannerApplicationID > 0 && (Model.AppStatusID >= (int)Enums.PAStausenum.documentIncomplete && Model.AppStatusID <= (int)Enums.PAStausenum.directorcheck))
                        {
                            <button type="button" class="btn btn-primary" onclick='return Approved();'>Hantar Ke Pengarah</button>
                            <button type="button" class="btn btn-primary" onclick='return Rejected();'>Dokumen Tidak Lengkap</button>
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.RouteUnit && Model.BannerApplicationID > 0)
                        {

                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Supervisor && Model.BannerApplicationID > 0)
                        {
                            <button type="button" class="btn btn-primary" onclick='return Approved();'>Hantar Ke Pengarah</button>
                            <button type="button" class="btn btn-primary" onclick='return Rejected();'>Dokumen Tidak Lengkap</button>
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Director && Model.BannerApplicationID > 0 && (Model.AppStatusID == (int)Enums.PAStausenum.meeting || Model.AppStatusID == (int)Enums.PAStausenum.directorcheck))
                        {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Lulus</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Rejected();'>Hantar Ke Supervisor</button>
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.CEO && Model.BannerApplicationID > 0 && (Model.AppStatusID == (int)Enums.PAStausenum.CEOcheck))
                        {
                            <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                        }

                        @if (Model.UserRollTemplate == (int)Enums.RollTemplate.Administrator && Model.BannerApplicationID > 0)
                        {

                        }
                        
                        <input type="button" class="btn btn-default" value="Kembali" onclick="back()" />

                    </div>
                </div>
            </div>
        }

        <!--Upload Doc-->
        <div id="uploadDocumentModal" class="modal fade" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                @using (Html.BeginForm("UploadDocument", "BannerApplication", FormMethod.Post, new { name = "frmuploadDocument", id = "frmuploadDocument", enctype = "multipart/form-data" }))
                {
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Upload Document</h4>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" name="Appid" id="Appid">
                            <input type="hidden" name="reqDocid" id="reqDocid">
                            <input type="hidden" name="isReqDoc" id="isReqDoc">

                            <input type="file" id="DocumentFile" name="file" accept="application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint,text/plain, application/pdf, image/*" />
                            <br />
                        </div>
                        <div class="modal-footer">
                            @if (Model.UserRollTemplate > (int)Enums.RollTemplate.DeskOfficer)
                            {
                                <input type="button" class="btn btn-primary" onclick="return UploadDocument()" value="Upload" />
                            }
                            else
                            {
                                if (Model.UserRollTemplate == (int)Enums.RollTemplate.Public)
                                {
                                    <input type="button" class="btn btn-primary" onclick="return UploadAttechment()" value="Upload" />
                                }
                            }
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div id="myModal" class="modal fade" role="dialog">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Lesen</h4>
                    </div>
                    <div class="modal-body">
                        <p>
                            <iframe id="ifrm" src="" height="500" width="850" frameborder="0"></iframe>
                        </p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="showAddBannerObject" class="modal fade" role="dialog">
            <div class="modal-dialog modal-lg">
                @using (Html.BeginForm("AddBannerObject", "BannerApplication", FormMethod.Post, new { name = "frmsaveBannerObject", id = "frmsaveBannerObject" }))
                {
                    @Html.HiddenFor(m => m.BannerApplicationID)
            <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Tambah Iklan</h4>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-sm-12 col-lg-6">
                                    <div class="form-group">
                                        <div class="control-label">Kod Iklan</div>
                                        @Html.DropDownList("BannerCode", new SelectList(bannerCodeList, "BannerCodeID", "BannerCodeDesc"), new { @class = "form-control" })
                                        <span class="text-danger BannerCodeVal"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-12 col-lg-6">
                                    <div class="form-group">
                                        <div class="control-label">Lokasi Dipohon</div>
                                        @Html.DropDownList("Location", new SelectList(locationList, "LocationID", "LocationDesc"), new { @class = "form-control" })
                                        <span class="text-danger LocationVal"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-12 col-lg-6">
                                    <div class="form-group">
                                        <div class="control-label">Saiz Iklan Dipohon (meter persegi)</div>
                                        @Html.TextBoxFor(m => m.BSize, new { @id = "bsize", @class = "form-control allownumericwithdecimal" })
                                        <span class="text-danger SizeVal"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-12 col-lg-6">
                                    <div class="form-group">
                                        <div class="control-label">Bilangan Iklan</div>
                                        @Html.TextBoxFor(m => m.BQuantity, "1", new { @class = "form-control allowinteger" })
                                        <span class="text-danger quantityVal"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <input type="submit" class="btn btn-primary" value="Tambah" onclick="return SaveBannerObjects()" />
                            <button type="button" class="btn btn-default" data-dismiss="modal">Batal</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script>
        var userRollTemplate = 0;
        var visibleGridColume = false;
        var visibleGridUploadColume = false;
        var requiredDocList = [];

        var success = '@(TempData["SuccessMessage"])';
        if (success != null && success != "") {
            successMessage(success);
        }

        var actionError = '@(TempData["ErrorMessage"])';
        if (actionError != null && actionError != "") {
            errorMessage(actionError);
        }

        var totalObject = @Model.totalObjects;
        var restrictSubmittedApps = @((userRoleSession.HasValue && (userRoleSession.Value == (int)TradingLicense.Infrastructure.Enums.RollTemplate.RouteUnit)).ToString().ToLower());

        var IsEdit = '@TradingLicenseCommon.HasAccess(SystemEnum.Page.PremiseApplication, SystemEnum.PageRight.CrudLevel3)';
        var IsDelete = '@TradingLicenseCommon.HasAccess(SystemEnum.Page.PremiseApplication, SystemEnum.PageRight.CrudLevel4)';
        var IsView = '@TradingLicenseCommon.HasAccess(SystemEnum.Page.PremiseApplication, SystemEnum.PageRight.CrudLevel)';

        var strValidateFileFormate = '@TradingLicense.Infrastructure.ProjectConfiguration.UploadFileFormat';
        var _validFileExtensions = [];
        _validFileExtensions = strValidateFileFormate.split(",");


        if ('@Model.UploadRequiredDocids' != null && '@Model.UploadRequiredDocids' != '') {

            var UploadRequiredDocumentlist = '@Model.UploadRequiredDocids';

            var arr = UploadRequiredDocumentlist.split(',');
            $.each(arr, function (index, value) {
                requiredDocList.push(value);
            });
        }

        function frmSubmit(isdraft) {
            $("#IsDraft").val(isdraft);
            if (validate(isdraft)) {
                $("#frmBannerApplication").submit();
            }
        }

        function Approved() {
            $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit');
            $("#frmBannerApplication").submit();
            return false;
        }

        function Rejected() {
            $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected');
            $("#frmBannerApplication").submit();
            return false;
        }

        function SaveBannerObjects(){
            $("frmsaveBannerObject").submit();
        }

        function bindDownload(attechmentID) {
            if (attechmentID > 0) {
                window.location.href = "@Url.Action("Download", "BannerApplication")" + "?attechmentID=" + attechmentID;
            }
        }

        function back() {
            var link = '@Url.Action("BannerApplication", "BannerApplication")';
            window.location.href = link;
        }

        function validate()
        {
            var ddl = document.getElementById("individualList");
            var selectedValue = ddl.options[ddl.selectedIndex].value;
            var value3 = document.getElementById("bsize").value;

            if (selectedValue == ""){
                alert("Sila masukkan nama pemohon");
                return false;
            }else if (value3 == "" && totalObject == 0 || value3 == "0" && totalObject == 0){
                alert("Sila masukkan saiz iklan");
                return false;
            }
            return true;
        }

        function validateBannerApplication(isdraft) {

            $("#UploadRequiredDocids").val(requiredDocList);

            RequiredDocument();

            if (!$("#frmBannerApplication").valid()) {
                return false;
            }else if ($('#BannerCodeids').val() == "") {
                alert("Sila pilih Kod Iklan");
                return false;
            }else if (userRollTemplate > 1 && $('#IndividualID').val() == "") {
                alert("Please select Mykad/Passport No");
                return false;
            } else if (userRollTemplate == 1 && !isdraft && $('.lablereqdocument').length != requiredDocList.length) {
                alert("Please Upload all Required Document");
                return false;
            }
            else if (userRollTemplate > 1 && $('.chkreqdoc:checked').length != $('.chkreqdoc').length) {
                alert("Please select all checkbox for Required Document");
                return false;
            }
            return true;
        }

        function RequiredDocument() {

            var RequiredArray = [];
            $('.chkreqdoc').each(function () {
                if ($(this).is(":checked")) {
                    RequiredArray.push($(this).val());
                }
            });
            $("#RequiredDocIds").val(RequiredArray);

            checkButtonState();
        }

        function checkButtonState() {

            var isDocument = false;
            if ($('.chkreqdoc:checked').length == $('.chkreqdoc').length) {
                isDocument = true;
            }

            if (isDocument) {
                $('.btSubmit').show();
            } else {
                $('.btSubmit').hide();
            }
        }

        //Select2 for Individual & Company
        $(function () {



            userRollTemplate = $("#UserRollTemplate").val();

            $("#Appid").val(@Model.BannerApplicationID);

            var success = '@(TempData["SuccessMessage"])';
            if (success != null && success != "") {
                successMessage(success);
            }

            var actionError = '@(TempData["ErrorMessage"])';
            if (actionError != null && actionError != "") {
                errorMessage(actionError);
            }

            if (userRollTemplate == 1 || userRollTemplate == 3 || userRollTemplate == 4) {
                visibleGridUploadColume = true;
            }
            if (userRollTemplate == 2) {
                visibleGridColume = true;
            }

            //Form input control modes
            $(".allownumericwithdecimal").on("keypress keyup blur", function (event) {
                $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
                if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which != 8 && event.which < 48 || event.which > 57) && (event.which == 37 || event.which == 39)) {
                    event.preventDefault();
                }
            });

            $(".allowinteger").on("keypress keyup blur", function (event) {
                $(this).val($(this).val().replace(/[^0-9]/g, ''));
                if ((event.which != 46) && (event.which != 8 && event.which < 48 || event.which > 57) && (event.which == 37 || event.which == 39)) {
                    event.preventDefault();
                }
            });

            $('#companiesList').select2({ width: '100%', placeholder: "Pilih Nama Syarikat", minimumInputLength: 2 });

            function individualFormating(state) {
                if (!state.isNew) {
                    return state.text;
                }

                state.text = state.fullName + ' (' + state.passportNo + ')';
                var $state = $(
                  '<span>' + state.text + '&nbsp;</span>'
                );
                if (state.isNew) {
                    var editLink = $(' <a href="javascript:void(0);">Edit</a>');
                    editLink.on('click', function () {
                        showIndividualModal(state);
                    });
                    $state.append(editLink);
                }
                return $state;
            }

            $("#individualList").select2({
                placeholder: "Select Full Name or Mykad/Passport No",
                minimumInputLength: 2,
                width: '100%',
                tags: true,
                tokenSeparators: [';'],
                templateSelection: individualFormating,
                createTag: function (params) {
                    var term = params.term;
                    var indexOfPassport = term.indexOf('(');
                    var fullName = '';
                    var passportNo = '';
                    if (indexOfPassport > 0) {
                        var endIndex = term.indexOf(')', indexOfPassport);
                        passportNo = endIndex > 0 ? term.substring(indexOfPassport + 1, endIndex) : term.substring(indexOfPassport + 1);
                        fullName = term.substring(0, indexOfPassport);
                    } else {
                        fullName = term;
                    }

                    return {
                        id: term,
                        text: fullName + ' (' + passportNo + ')',
                        fullName: fullName,
                        passportNo: passportNo,
                        isNew: true
                    };
                },
                ajax: {
                    type: "POST",
                    url: encodeURI('@Url.Action("FillIndividual", "PremiseApplication")'),
                    //Data: allows us to pass a parameter to the controller
                    data: function (query) {
                        //console.log(query)
                        return { query: query.term }
                    },
                    //processes the results from the JSON method and gives us the select list
                    processResults: function (data) {
                        //console.log(data)
                        return {
                            results: data
                        };
                    }
                }
            });
        });

        function AddBannerObject() {
            $("#showAddBannerObject").modal('show');

            //Form input control modes
            $(".allownumericwithdecimal").on("keypress keyup blur", function (event) {
                $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
                if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which != 8 && event.which < 48 || event.which > 57) && (event.which == 37 || event.which == 39)) {
                    event.preventDefault();
                }
            });

            $(".allowinteger").on("keypress keyup blur", function (event) {
                $(this).val($(this).val().replace(/[^0-9]/g, ''));
                if ((event.which != 46) && (event.which != 8 && event.which < 48 || event.which > 57) && (event.which == 37 || event.which == 39)) {
                    event.preventDefault();
                }
            });
        }

        function RequiredDocumentModel(Requiredid) {
            $("#reqDocid").val(Requiredid);
            $('#isReqDoc').val("1");
            $('#uploadDocumentModal').modal('show');
        }

        function UploadDocument(){

            if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

                var data = new FormData();
                var files = $("#DocumentFile").get(0).files;

                if (files.length > 0) {
                    data.append("DocumentFile", files[0]);
                }

                data.append("BannerApplicationID", @Model.BannerApplicationID);
                data.append("reqDocid", $("#reqDocid").val());
                data.append("isReqDoc", $("#isReqDoc").val());

                var ajaxRequest = $.ajax({
                    type: "POST",
                    url: '@Url.Action("UploadDocument", "BannerApplication")',
                    contentType: false,
                    processData: false,
                    data: data,
                    async: false,
                    success: function (result) {
                        if (result != null) {
                            $("#DocumentFile").val("");
                            if (result.status == 1) {
                                successMessage(result.message);

                                if ($("#isReqDoc").val() > 0) {
                                    bindTable();
                                }
                            }
                            else {
                                errorMessage(result.message);
                            }
                        }
                        $("#uploadDocumentModal").modal('hide');
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        errorMessage(xhr.responseText);
                    }
                });

            } else {
                alert("Please Select Valid File");
            }
        }

        $(document).ready(function loadReqDoc() {
            $('#RequiredDocument').show();

            var data = { "bannerApplicationId": @Model.BannerApplicationID };

            table = $("#tblBusinessType").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "bPaginate": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("RequiredDocument", "BannerApplication")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    {
                        "title": "Disertakan?",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                                appendstring += '<div class="checkbox"> <label for="chkdoc_' + row["RequiredDocID"] + '"> <input id="chkdoc_' + row["RequiredDocID"] + '"  value="' + row["RequiredDocID"] + '" class="chkreqdoc" type = "checkbox" onclick = "RequiredDocument();"  ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                            return appendstring
                        },
                        width: "7%",
                        "orderable": false,
                        "visible": visibleGridColume,
                    },
                    { "title": "Jenis Dokumen", "data": "RequiredDocDesc", "orderable": false },
                    {
                        "title": "Muat Naik",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                                appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RequiredDocID"] + '" onclick="RequiredDocumentModel(' + row["RequiredDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                            return appendstring
                        },
                        width: "7%",
                        "orderable": false,
                        "visible": visibleGridUploadColume,
                    },
                    {
                        "title": "Nama Fail",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';

                            if (visibleGridUploadColume) {
                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank"   href="javascript:void(0);" title="'+userRollTemplate+'" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lablereqdocument" style="cursor: pointer;" id="lblreqAttachment_' + row["RequiredDocID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                                } else {
                                    appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lablereqdocument"  id="lblreqAttachment_' + row["RequiredDocID"] + '"> </label> </a>';
                                }

                            } else {
                                if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["BannerApplicationID"] + ');">' + row["AttachmentFileName"] + '</a>';
                                } else {
                                    appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                                }
                            }
                            return appendstring
                        },
                        "orderable": false,
                        "visible": visibleGridUploadColume
                    }
                ]
            });
        });



        $(document).ready(function bannerObj() {
            if ($.fn.DataTable.isDataTable("#BannerObject")) {
                $('#BannerObject').dataTable().fnDestroy();
            }

            var data = { "bannerApplicationId": @Model.BannerApplicationID };

            table = $("#BannerObject").DataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "bPaginate": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("BannerObject", "BannerApplication")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    { "title": "No. Siri Iklan", "data": "BannerObjectID", "orderable": false },
                    { "title": "Kod Iklan", "data": "BannerCodeDesc", "orderable": false },
                    { "title": "Lokasi", "data": "LocationDesc", "orderable": false },
                    { "title": "Saiz", "data": "BSize", "orderable": false },
                    { "title": "Bilangan", "data": "BQuantity", "orderable": false },
                    { "title": "Fi (RM)", "data": "Fee", "orderable": false },
                    {
                        "title": "Padam",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';
                            if (!restrictSubmittedApps || data['AppStatusID'] == 1) {

                                if (IsDelete != "False" && '@Model.totalObjects' > 1) {
                                    appendstring += '<a href="javascript:void(0);" data-id="' + row["BannerObjectID"] + '" onclick="bindDelete(this);" title="Padam"><img src="@Url.Content("~/images/delete.png")" alt="Delete" /></a>';
                                }
                            }
                            return appendstring
                        },
                        "width": "100px",
                        "orderable": false,
                        "class": "action-icons"
                    }
                ]
            })
        });

        $(document).ready(function loadComments() {
            $('#Comments').show();
            if ($.fn.DataTable.isDataTable("#tblComments")) {
                $('#tblComments').dataTable().fnDestroy();
            }

            var data = { "BannerApplicationID": @Model.BannerApplicationID };

            table = $("#tblComments").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 50,
                "processing": true,
                "serverSide": true,
                "responsive": true,
                "bPaginate": false,
                "bLengthChange": false,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("BannerComments", "BannerApplication")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    {
                        "targets": 0,
                        "searchable": false,
                        "orderable": false,
                        "title": "No.",
                        "data": null,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "title": "Ulasan", "orderable": false, "data": "Comment" },
                    { "title": "Pengulas", "orderable": false, "data": "FullName" },
                    { "title": "Ulasan dibuat pada", "data": "CommentDate", render: renderDateTime },
                    {
                        "title": "Tindakan",
                        "data": null,
                        "render": function (data, type, row) {
                            var appendstring = '';

                            if (data['UsersID'] == '@(ProjectSession.User.UsersID)') {
                                appendstring += '<a  href="@Url.Action("AddCatatan", "BannerApplication")?Id=' + row["BannerApplicationID"] + '" title="Ubah"> <img src="@Url.Content("~/images/edit.png")" alt="Edit" /></a>&nbsp; ';
                                appendstring += '<a href="javascript:void(0);" data-id="' + row["BACommentID"] + '" onclick="bindDelete(this);" title="Padam"><img src="@Url.Content("~/images/delete.png")" alt="Delete" /></a>';
                            }
                            return appendstring
                        },
                        "width": "100px",
                        "orderable": false,
                        "class": "action-icons"
                    }
                ]
            });
        });

        function bindDelete(item) {
            var x = confirm("Anda benar-benar pasti?");
            if (x) {
                $.ajax({
                    type: "POST",
                    url: encodeURI('@Url.Action("DeleteBannerObject", "BannerApplication")'),
                    data: { "Id": $(item).attr('data-id') },
                    cache: false,
                    dataType: 'json',
                    success: function (data, textStatus, XMLHttpRequest) {
                        if (data.success) {
                            bannerObj();
                            successMessage(data.message);
                        }
                        else {
                            successMessage(data.message);
                        }
                    },
                    error: function (jqXHR, exception, errMsg) {
                    }
                });
            }
        }

        // Generate license PDF
        $(document).ready(function () {
            $('#btnLicense').click(function () {
                //alert("Cetak Lesen");
                $('.modal-body iframe').attr('src', "../BannerApplication/GenerateLicense?AppId=" + '@Model.BannerApplicationID');
                $('#myModal').modal('show');
            });
        });
        // Generate Letter PDF
        $(document).ready(function () {
            $('#btnLetter').click(function () {
                $('.modal-body iframe').attr('src', "../BannerApplication/GenerateLetter?AppId=" + '@Model.BannerApplicationID');
                $('#myModal').modal('show');
            });
        });

    </script>
}
