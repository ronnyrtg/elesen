@model TradingLicense.Model.StallApplicationModel
@using AutoMapper;
@{
    ViewBag.Title = "ManageStallApplication";
}
@{

    List<TradingLicense.Entities.SAReqDoc> stallDocList = new List<TradingLicense.Entities.SAReqDoc>();

    List<TradingLicense.Model.IndividualModel> individualList = new List<TradingLicense.Model.IndividualModel>();

    List<TradingLicense.Model.StallCodeModel> stallCodeList = new List<TradingLicense.Model.StallCodeModel>();

    List<TradingLicense.Model.IndividualModel> individualOwner = new List<TradingLicense.Model.IndividualModel>();

    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {
        var stallCode = ctx.StallCodes.ToList();
        stallCodeList = Mapper.Map<List<TradingLicense.Model.StallCodeModel>>(stallCode);

        var individualOwnerList = ctx.Individuals.ToList();
        individualOwner = Mapper.Map<List<TradingLicense.Model.IndividualModel>>(individualOwnerList);

        var stallDocQuery = from sa in ctx.SAReqDocs
                            join rd in ctx.RequiredDocs
                            on sa.RequiredDocID equals rd.RequiredDocID
                            select new { sa, rd };

        foreach (var item in stallDocQuery.ToList()) {
            stallDocList.Add(new TradingLicense.Entities.SAReqDoc()
            {
                SAReqDocID = item.sa.SAReqDocID,
                RequiredDocID = item.sa.RequiredDocID,
                RequiredDoc = item.rd
            });
        }
    }

    List<SelectListItem> periodList = new List<SelectListItem>();
    periodList.Add(new SelectListItem { Text = "Tahun", Value = "1" });
    periodList.Add(new SelectListItem { Text = "Bulan", Value = "2" });
    periodList.Add(new SelectListItem { Text = "Minggu", Value = "3" });
    periodList.Add(new SelectListItem { Text = "Hari", Value = "4" });
}
<div id="divMessage"></div>
<div class="card">
    <div class="header">
        <h4 id="headerTitle">Kemaskini Permohonan Lesen Pasar</h4>
    </div>
    <div class="body">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmStallApplication", id = "frmStallApplication" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.StallApplicationID)
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="control-label">Nama Pemohon<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.IndividualID, new SelectList(individualOwner, "IndividualID", "FullName"), "Masukkan Nama atau MyKad", new { @id = "individualOwner", @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        <div class="control-label">Kod Lesen Pasar</div>
                        @Html.DropDownList("StallCode", new SelectList(stallCodeList.OrderBy(x => x.StallCodeID), "StallCodeID","StallCodeDesc"), "Pilih Kod Lesen Pasar", new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"> Jenis Barang Dijaja <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.GoodsType, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Lokasi Perniagaan<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.StallLocation, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.StallLocation)
                    </div>
                </div>
            </div>
           
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"> Masa Berniaga <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.OperationHours, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="control-label">
                            Nama Pembantu (Mykad/Paspot)
                        </div>
                        @Html.DropDownList("Individual", new SelectList(Model.selectedIndividualList.OrderBy(x => x.text), "id", "text"), "Select  Mykad/Passport No", new { @id = "individualList", @class = "form-control", multiple = "true", onchange = "changeIndividual()" })
                        @Html.HiddenFor(model => model.Individualids)
                        @Html.HiddenFor(model => model.newIndividualsList)                    
                    </div>
                </div>
            </div>
            <h4> Dokumen Wajib </h4>
            <div class="table-responsive">
                <table class="table table-hover table-bordered dataTable no-footer" style="width:100%" role="grid" cellspacing="0">
                    <thead>
                        <th> Disertakan? </th>
                        <th> Jenis Dokumen </th>
                    </thead>
                    <tbody>
                        @foreach (var item in stallDocList) {
                        <tr>
                            <td> <input name="chk_@item.SAReqDocID" value="0" onclick="checkRequiredDocument()" type="checkbox" /></td>
                            <td> @item.RequiredDoc.RequiredDocDesc </td>
                        </tr>
                        }
                    </tbody>
                </table> 
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Simpan" />
                        <input type="button" class="btn btn-default" value="Batal" onclick="back()" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@section scripts{
    <script>
        function checkRequiredDocument() {
            //var val = $(this).val();
            //var id = $(this).attr("name");
            //alert("Checkbox: ", val, id);
            console.log(this);
        }

        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({ dateFormat: 'dd/MM/yyyy' });

            $("#individualOwner").select2({ width: '100%' });
            $("#individualList").select2({ width: '100%' });

            var actionError = '@(TempData["ErrorMessage"])';
            if (actionError != null && actionError != "") {
                errorMessage(actionError);
            }

            function back() {
                var link = '@Url.Action("StallApplication", "StallApplication")';
                window.location.href = link;
            }

            function individualFormating(state) {
                if (!state.isNew) {
                    return state.text;
                }

                state.text = state.fullName + ' (' + state.passportNo + ')';
                var $state = $(
                  '<span>' + state.text + '&nbsp;</span>'
                );
                if (state.isNew) {
                    var editLink = $(' <a href="javascript:void(0);">Edit</a>');
                    editLink.on('click', function () {
                        showIndividualModal(state);
                    });
                    $state.append(editLink);
                }
                return $state;
            }

            var individualSelecteId = [];
            if ('@Model.Individualids' != null && '@Model.Individualids' != '') {
                var individualIds = '@Model.Individualids';

                var arr = individualIds.split(',');
                $.each(arr, function (index, value) {
                    individualSelecteId.push(value);
                });
                $('#individualList').val(individualSelecteId);
                $('#individualList').trigger('change');
            } else {
                individualSelecteId = [];
            }

            $("#individualList").select2({
                placeholder: "Select Full Name or Mykad/Passport No",
                minimumInputLength: 2,
                tags: true,
                tokenSeparators: [';'],
                templateSelection: individualFormating,
                createTag: function (params) {
                    var term = params.term;
                    var indexOfPassport = term.indexOf('(');
                    var fullName = '';
                    var passportNo = '';
                    if (indexOfPassport > 0) {
                        var endIndex = term.indexOf(')', indexOfPassport);
                        passportNo = endIndex > 0 ? term.substring(indexOfPassport + 1, endIndex) : term.substring(indexOfPassport + 1);
                        fullName = term.substring(0, indexOfPassport);
                    } else {
                        fullName = term;
                    }

                    return {
                        id: term,
                        text: fullName + ' (' + passportNo + ')',
                        fullName: fullName,
                        passportNo: passportNo,
                        isNew: true
                    };
                },
                ajax: {
                    type: "POST",
                    url: encodeURI('@Url.Action("FillIndividual", "StallApplication")'),
                    //Data: allows us to pass a parameter to the controller
                    data: function (query) {
                        //console.log(query)
                        return { query: query.term }
                    },
                    //processes the results from the JSON method and gives us the select list
                    processResults: function (data) {
                        //console.log(data)
                        return {
                            results: data
                        };
                    }
                }
            });

            function changeIndividual() {
                var individuals = $("#individualList").select2('data');
                var newIndividuals = [];
                for (var i = 0; i < individuals.length; i++) {
                    var ind = individuals[i];
                    if (!ind.isNew) {
                        newIndividuals.push(ind.id);
                    }
                }
                $('#Individualids').val(newIndividuals.join(','));
                alert($('#Individualids').val());
            }
        });
    </script>
}
