
@model TradingLicense.Model.MLPremiseApplicationModel
@using AutoMapper;
@using System.Linq;
@using TradingLicense.Infrastructure;
@{
    ViewBag.Title = "Money Lender Premise License";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<TradingLicense.Model.BusinessTypeModel>
    businessTypeList = new List<TradingLicense.Model.BusinessTypeModel>();

    List<TradingLicense.Model.SectorModel>
    sectorsList = new List<TradingLicense.Model.SectorModel>();

    List<TradingLicense.Model.CompanyModel>
    companiesList = new List<TradingLicense.Model.CompanyModel>();

    List<TradingLicense.Model.Select2ListItem> businessCodeList = new List<TradingLicense.Model.Select2ListItem>();
    List<TradingLicense.Model.PremiseTypeModel> PremiseTypeList = new List<TradingLicense.Model.PremiseTypeModel>();
    List<TradingLicense.Model.AppStatusModel> appStatusList = new List<TradingLicense.Model.AppStatusModel>();
    List<TradingLicense.Model.IndividualModel> individuList = new List<TradingLicense.Model.IndividualModel>();

    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {
        var businessType = ctx.BusinessTypes.ToList();
        businessTypeList = Mapper.Map<List<TradingLicense.Model.BusinessTypeModel>>(businessType);

        var sectors = ctx.Sectors.ToList();
        sectorsList = Mapper.Map<List<TradingLicense.Model.SectorModel>>(sectors);

        var companies = ctx.Companies.ToList();
        companiesList = Mapper.Map<List<TradingLicense.Model.CompanyModel>>(companies);

        var premiseType = ctx.PremiseTypes.ToList();
        PremiseTypeList = Mapper.Map<List<TradingLicense.Model.PremiseTypeModel>>(premiseType);

        var appStatus = ctx.AppStatus.ToList();
        appStatusList = Mapper.Map<List<TradingLicense.Model.AppStatusModel>>(appStatus);

        var individus = ctx.Individuals.ToList();
        individuList = Mapper.Map<List<TradingLicense.Model.IndividualModel>>(individus);
    }

    List<SelectListItem> ModeList = new List<SelectListItem>();
    ModeList.Add(new SelectListItem { Text = "Ekspres", Value = "1" });
    ModeList.Add(new SelectListItem { Text = "Pengarah", Value = "2" });
    ModeList.Add(new SelectListItem { Text = "Biasa", Value = "3" });
    ModeList.Add(new SelectListItem { Text = "Mesyuarat", Value = "4" });


    List<SelectListItem> PremiseOwnershipList = new List<SelectListItem>();
    PremiseOwnershipList.Add(new SelectListItem { Text = "Pemilikan Sendiri", Value = "0" });
    PremiseOwnershipList.Add(new SelectListItem { Text = "Sewaan", Value = "1" });

}
<div id="divMessage"></div>
<div class="card">
    <div class="header">
        <h4 id="headerTitle">Permohonan Baru Lesen Pemberi Pinjam Wang</h4>
    </div>
    <div class="body">
        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmPremiseApplication", id = "frmPremiseApplication" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.MLPremiseApplicationID)
            @Html.HiddenFor(m => m.UsersID)
            @Html.HiddenFor(m => m.UserRollTemplate)
            @Html.HiddenFor(m => m.RequiredDocIds)
            @Html.HiddenFor(m => m.IsDraft)
            @Html.HiddenFor(m => m.AppStatusID)
            if (Model.AppStatusID != (int)Enums.PAStausenum.CEOcheck && Model.AppStatusID != (int)Enums.PAStausenum.meeting)
            {
                @Html.HiddenFor(m => m.SubmitType)
            }

            @Html.HiddenFor(m => m.UploadRequiredDocids)

            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="form-group">
                        <div class="control-label">Jenis Kelulusan<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.Mode, new SelectList(ModeList, "Value", "Text"),new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Mode)
                    </div>
                 </div>
            </div>
            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="form-group">
                        <div class="control-label">Jenis Perniagaan<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.BusinessTypeID, new SelectList(businessTypeList.OrderBy(x => x.BusinessTypeDesc), "BusinessTypeID", "BusinessTypeDesc"), "Pilih Jenis Perniagaan", new { @class = "form-control", @onchange = "businessTypeChange()" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="control-label">
                            Nama Penuh (Mykad/Passport).   
                            @if (Model.UserRollTemplate > 2)
                            {<span class="cfont">*</span>} </div>
                            @Html.DropDownListFor(m => m.CompanyID, new SelectList(individuList, "IndividualID", "FullName"), "Masukkan Nama atau nombor MyKad", new { @id = "individuList", @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <div class="control-label">Nama Syarikat<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.CompanyID, new SelectList(companiesList, "CompanyID", "CompanyName"), "Select Company", new { @id = "companyList", @class = "form-control" })
                    </div>
                </div>
            </div>

            <hr />
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Alamat Premis Yang Dipohon<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.Addra1, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Addra2, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Addra3, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Addra4, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Poskod<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.PcodeA, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Negeri<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.StateA, new { @Value = "Wilayah Persekutuan Labuan", @class = "form-control" })
                    </div>
                </div>
            </div>
            <hr />
            <div class="header"><h4> Butir Butir Modal </h4></div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <br />
                        <div class="control-label"> Modal Dibenarkan <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.AuthorizedCapital, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label"> Modal Terbitan <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.IssuedCapital, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label"> Modal Berbayar <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.PaidUpCapital, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="header"><h4> Sumber Kumpulan Wang </h4></div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <br />
                        <div class="control-label"> Bank / Institusi Kewangan <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.BankSource, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label"> Simpanan <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.SavingSource, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label"> Pinjaman (Daripada Siapa) <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.LoanSource, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 col-sm-3">
                    <div class="form-group">
                        <div class="control-label"> Lain - Lain <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.OtherSource, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 col-md-12" id="RequiredDocument" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Dokumen Wajib   @if (Model.UserRollTemplate > 1)
                            {<span class="cfont">*</span>}
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblBusinessType"></table>
                    </div>
                </div>
                <div class="col-lg-12 col-md-12" id="AdditionalDocument" style="display:none;">
                    <div class="form-group">
                        <div class="control-label">
                            Senarai Dokumen Tambahan @if (Model.UserRollTemplate > 1)
                            {<span class="cfont">*</span>}
                        </div>
                        <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblAdditional"></table>
                    </div>
                </div>
            </div>

            if (Model.UserRollTemplate > 1)
            {
                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control-label">
                                Masukkan Catatan baru
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control">
                                @Html.TextAreaFor(m => m.newComment, new { @class = "form-control", rows = "5" })
                            </div>
                        </div>
                    </div>
                </div>
                if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Director)
                {
                    
                        List<SelectListItem> supportList1 = new List<SelectListItem>();
                        supportList1.Add(new SelectListItem { Text = "Supported", Value = "1" });
                        supportList1.Add(new SelectListItem { Text = "Not Supported", Value = "0" });
                    
                <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="control-label">Do you Support</div>
                                @Html.DropDownListFor(m => m.Supported, new SelectList(supportList1, "Value", "Text"), new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                }
                if (Model.AppStatusID == (int)Enums.PAStausenum.CEOcheck) // Awaiting CEO
                {
                   
                        List<SelectListItem> supportList2 = new List<SelectListItem>();
                        supportList2.Add(new SelectListItem { Text = "Approved", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit });
                        supportList2.Add(new SelectListItem { Text = "Rejected", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected });
                    
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="control-label">Do you Support</div>
                                @Html.DropDownListFor(m => m.SubmitType, new SelectList(supportList2, "Value", "Text"), new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                }
                if (Model.AppStatusID == (int)Enums.PAStausenum.meeting) // Meeting
                {
                
                    List<SelectListItem> supportList3 = new List<SelectListItem>();
                    supportList3.Add(new SelectListItem { Text = "Approved", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit });
                    supportList3.Add(new SelectListItem { Text = "Rejected", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected });
                    supportList3.Add(new SelectListItem { Text = "KIV", Value = TradingLicense.Web.Controllers.PremiseApplicationController.OnKIV });
                
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="control-label">Do you Support</div>
                                @Html.DropDownListFor(m => m.SubmitType, new SelectList(supportList3, "Value", "Text"), new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-lg-12 col-md-12" id="Comments" style="display:none;">
                        <div class="form-group">
                            <div class="control-label">
                                Senarai Catatan
                            </div>
                            <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblComments"></table>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12" id="RouteComments" style="display:none;">
                        <div class="form-group">
                            <div class="control-label">
                                Route Department Comments
                            </div>
                            <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblRouteComments"></table>
                        </div>
                    </div>
                </div>
            
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            @if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public && (Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApproved || Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions || Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationRejected))
                            {
                                <input type="button" class="btn btn-primary btSubmit" value="Cetak Surat Perakuan" id="btnLetter" name="btnSubmit" />
                            }
                            @if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public && (Model.Mode == 1))
                            {
                                <input type="button" class="btn btn-primary btSubmit" value="Lulus Bersyarat" id="btnLetter" name="btnSubmit" />
                            }
                            @if ((Model.Mode == 1 && Model.AppStatusID != (int)Enums.PAStausenum.Pendingpayment && Model.AppStatusID != (int)Enums.PAStausenum.LicenseGenerated) || Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApproved || Model.AppStatusID == (int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions)
                            {
                                <input type="button" class="btn btn-primary btSubmit" value="Public Signed Letter" id="btnGetPaymentDue" onclick="showPaymentsDuePopup();" />
                            }
                            @if (Model.AppStatusID == (int)Enums.PAStausenum.LicenseGenerated)
                            {
                                // Add a button for showing License print
                                <input type="button" class="btn btn-primary btSubmit" value="Generate License" id="btnGenrateLicense" onclick="alert('We need to Generate license');" />
                            }
                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public || Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.DeskOfficer)
                            {
                                if (Model.AppStatusID == 0 || Model.AppStatusID == (int)TradingLicense.Infrastructure.Enums.PAStausenum.draftcreated)
                                {
                                    <input type="submit" class="btn btn-primary" onclick='frmSubmit(true); return false;' id="btnsubmitdraft" value="Simpan Draf " /> 
                                    <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                                }
                            }

                            @*@if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                                {
                                    <input type="submit" class="btn btn-primary btSubmit" value="Submit" onclick='frmSubmit(true); return false;' id="btnsubmit" />
                                }*@

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Clerk && Model.MLPremiseApplicationID > 0 && (Model.AppStatusID >= (int)Enums.PAStausenum.submittedtoclerk && Model.AppStatusID <= (int)Enums.PAStausenum.unitroute))
                            {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return showRouteUnitConfirmModal();'>Route Application</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Submit to Director</button>
                            }

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.RouteUnit && Model.MLPremiseApplicationID > 0)
                            {

                            }

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Supervisor && Model.MLPremiseApplicationID > 0)
                            {

                            }

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Director && Model.MLPremiseApplicationID > 0 && (Model.AppStatusID == (int)Enums.PAStausenum.meeting || Model.AppStatusID == (int)Enums.PAStausenum.directorcheck))
                            {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Approved</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Rejected();'>Reject</button>
                            }

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.CEO && Model.MLPremiseApplicationID > 0 && (Model.AppStatusID == (int)Enums.PAStausenum.CEOcheck))
                            {
                                <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                            }

                            @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Administrator && Model.MLPremiseApplicationID > 0)
                            {

                            }

                            <input type="button" class="btn btn-default" value="Kembali" onclick="back()" />

                        </div>
                    </div>
                </div>
               
           }
        }
        </div>
    </div>


<!--Upload Doc-->
<div id="uploadDocumentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        @using (Html.BeginForm("UploadDocument", "PremiseApplication", FormMethod.Post, new { name = "frmuploadDocument", id = "frmuploadDocument", enctype = "multipart/form-data" }))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Upload Document</h4>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="preAppid" id="preAppid">
                    <input type="hidden" name="reqDocid" id="reqDocid">
                    <input type="hidden" name="addDocid" id="addDocid">
                    <input type="hidden" name="isReqDoc" id="isReqDoc">

                    <input type="file" id="DocumentFile" name="file" accept="application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint,text/plain, application/pdf, image/*" /><br />
                </div>
                <div class="modal-footer">
                    @if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.DeskOfficer)
                    {
                        <input type="button" class="btn btn-primary" onclick="return UploadDocument()" value="Upload" />
                    }
                    else
                    {
                        if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                        {
                            <input type="button" class="btn btn-primary" onclick="return UploadAttechment()" value="Upload" />
                        }
                    }
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        }
    </div>
</div>

@if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Clerk)
{
    <!--Route Unit modal-->
    <div id="routeUnitModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Premise Application Route Confirmation</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-12 col-md-12" id="RouteUnitTable" style="display:none;">
                            <div class="form-group">
                                <div class="control-label">
                                    Departments
                                </div>
                                <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblRouteDepartments"></table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="return RoutePremiseApplication()">Confirm</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!--approved/reject-->
<div id="approvedrejectModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->

        @using (Html.BeginForm("SaveComment", "PremiseApplication", FormMethod.Post, new { name = "frmsaveComment", id = "frmsaveComment" }))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"><lable id="lblheaderTitle"></lable></h4>
                </div>
                <div class="modal-body">
                    <textarea rows="5" cols="65" class="classOfSelector" id="txtComment" maxlength="255" autofocus="autofocus" placeholder="Comment here..."></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="return SaveComment()"><lable id="lblapprovedreject"></lable> </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        }

    </div>
</div>
                                                            
      <div id="myModal" class="modal fade" role="dialog">
          <div class="modal-dialog modal-lg">

              <!-- Modal content-->
              <div class="modal-content">
                  <div class="modal-header">
                      <button type="button" class="close" data-dismiss="modal">&times;</button>
                      <h4 class="modal-title">Letter Details</h4>
                  </div>
                  <div class="modal-body">
                <p><iframe id="ifrm" src="" height="500" width="850" frameborder="0"></iframe></p>

                  </div>
                  <div class="modal-footer">
                      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                  </div>
              </div>

          </div>
      </div>

<div id="showPaymentsDue" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
    @using (Html.BeginForm("SavePaymentDue", "PremiseApplication", FormMethod.Post, new { name = "frmsavePaymentDue", id = "frmsavePaymentDue" }))
    {
        @Html.HiddenFor(m => m.MLPremiseApplicationID)
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Payments Due</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-3 col-sm-12">
                        <div class="form-group">
                            @Html.TextBox("totalDue", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <input type="submit" class="btn btn-primary" value="Submit"/>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    }
    </div>
</div>
                                                            
<style type="text/css">
    label.error {
        color: red;
    }
</style>

@section scripts{
<script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({dateFormat: 'dd/MM/yy'});
        })
</script>
<script>

    var userRollTemplate = 0;
    var visibleGridColume = false;
    var visibleGridUploadColume = false;

    var requiredDocList = [];
    var addtionalDocList = [];

    var actionError = '@(TempData["ErrorMessage"])';
    if (actionError != null && actionError != "") {
        errorMessage(actionError);
    }

    $(function () {

        userRollTemplate = $("#UserRollTemplate").val();

        var success = '@(TempData["SuccessMessage"])';
        if (success != null && success != "") {
            successMessage(success);
        }

        var actionError = '@(TempData["ErrorMessage"])';
        if (actionError != null && actionError != "") {
            errorMessage(actionError);
        }

        visibleGridUploadColume = true;
        if (userRollTemplate > 1) {
            visibleGridColume = true;
        }

        $("#businessCodeList").select2({ width: '100%' });
        $("#individualList").select2({ width: '100%' });
        $("#companyList").select2({ width: '100%', placeholder: "Pilih Syarikat" });

        AddRules();

        function formatBusinessCodes(data) {
            var r = data.text.split('~');
            var $result = $(
                '<div class="row">' +
                    '<div class="col-md-2">' + r[1] + '</div>' +
                    '<div class="col-md-10">' + r[0] + '</div>' +
                '</div>'
            );
            return $result;
        }

        function formatSelectionBusinessCodes(data) {
            var r = data.text.split('~');
            var $result = $(
                '<span>' +
                    r[1] + ' | '  + r[0] +
                '</span>'
            );
            return $result;
        }

        $("#businessCodeList").select2({
            placeholder: "Search for a Business Code",
            minimumInputLength: 0,
            templateResult: formatBusinessCodes,
            templateSelection: formatSelectionBusinessCodes,
            ajax: {
                type: "POST",
                url: encodeURI('@Url.Action("FillBusinessCode", "PremiseApplication")'),
                //Data: allows us to pass a parameter to the controller
                data: function (query) {
                    //console.log(query)
                    return {
                        query: query.term,
                        selectedMode: $('#Mode').val(),
                        selectedSector:  $("#SectorID").val()
                    }
                },
                //processes the results from the JSON method and gives us the select list
                processResults: function (data) {
                    //console.log(data)
                    return {
                        results: data
                    };
                }
            }
        });

        function showIndividualModal(data) {
            $('#modalUpdateIndividual').off('click');
            $('#modalUpdateIndividual').on('click', function() {
                data.fullName = $('#newIndividualFullName').val();
                data.passportNo = $('#newIndividualPassport').val();
                $("#individualList").trigger('change');
                $('#editIndividual').modal('hide');
            });
            $('#newIndividualFullName').val(data.fullName);
            $('#newIndividualPassport').val(data.passportNo);
            $('#editIndividual').modal('show');
        }

        function individualFormating(state) {
            if (!state.isNew) {
                return state.text;
            }

            state.text = state.fullName + ' (' + state.passportNo +')';
            var $state = $(
              '<span>' + state.text +'&nbsp;</span>'
            );
            if(state.isNew) {
                var editLink = $(' <a href="javascript:void(0);">Edit</a>');
                editLink.on('click', function() {
                    showIndividualModal(state);
                });
                $state.append(editLink);
            }
            return $state;
        }

        $("#individualList").select2({
            placeholder: "Select Full Name or Mykad/Passport No",
            minimumInputLength: 2,
            tags: true,
            tokenSeparators: [';'],
            templateSelection: individualFormating,
            createTag: function (params) {
                var term = params.term;
                var indexOfPassport = term.indexOf('(');
                var fullName= '';
                var passportNo = '';
                if(indexOfPassport > 0) {
                    var endIndex = term.indexOf(')', indexOfPassport);
                    passportNo = endIndex > 0 ? term.substring(indexOfPassport + 1, endIndex) : term.substring(indexOfPassport + 1);
                    fullName = term.substring(0, indexOfPassport);
                } else {
                    fullName = term;
                }

                return {
                    id: term,
                    text: fullName + ' (' + passportNo +')',
                    fullName: fullName,
                    passportNo: passportNo,
                    isNew: true
                };
            },
            ajax: {
                type: "POST",
                url: encodeURI('@Url.Action("FillIndividual", "PremiseApplication")'),
                //Data: allows us to pass a parameter to the controller
                data: function (query) {
                    //console.log(query)
                    return { query: query.term }
                },
                //processes the results from the JSON method and gives us the select list
                processResults: function (data) {
                    //console.log(data)
                    return {
                        results: data
                    };
                }
            }
        });

        

        var individualSelecteId = [];
        if ('@Model.Individualids' != null && '@Model.Individualids' != '') {
            var individualIds = '@Model.Individualids';

            var arr = individualIds.split(',');
            $.each(arr, function (index, value) {
                individualSelecteId.push(value);
            });
            $('#individualList').val(individualSelecteId);
            $('#individualList').trigger('change');
        } else {
            individualSelecteId = [];
        }

        if(@Model.BusinessTypeID >0)
        {
            $("#BusinessTypeID").val(@Model.BusinessTypeID);
            bindTable();
        }

        if ('@Model.UploadRequiredDocids' != null && '@Model.UploadRequiredDocids' != '') {

            var UploadRequiredDocumentlist = '@Model.UploadRequiredDocids';

            var arr = UploadRequiredDocumentlist.split(',');
            $.each(arr, function (index, value) {
                requiredDocList.push(value);
            });
        }

        

        $("#preAppid").val(@Model.MLPremiseApplicationID);

        $(".allownumericwithdecimal").on("keypress keyup blur", function (event) {
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });

        if(@Model.MLPremiseApplicationID > 0 && @Model.UserRollTemplate > 1) {
            loadComments();
        }
        if(@(Model.HasPADepSupp.ToString().ToLower()) === true)
        {
            loadRouteComments();
        }
    });

    function frmSubmit(isdraft) {
        $("#IsDraft").val(isdraft);
        if (validatePremiseApplication(isdraft)) {
            $("#frmPremiseApplication").submit();
        }
    }

    function validatePremiseApplication(isdraft) {
        $("#UploadRequiredDocids").val(requiredDocList);
        $("#UploadAdditionalDocids").val(addtionalDocList);

        AdditionalChecked();

        RequiredDocument();

        if (!$("#frmPremiseApplication").valid()) {
            return false;
        }else if ($('#BusinessCodeids').val() == "") {
            alert("Please select Business Code");
            return false;
        }else if (userRollTemplate > 1 && $('#Individualids').val() == "") {
            alert("Please select Mykad/Passport No");
            return false;
        } else if (userRollTemplate == 1 && !isdraft && $('.lablereqdocument').length != requiredDocList.length) {
            alert("Please Upload all Required Document");
            return false;
        }
        else if (userRollTemplate == 1 && !isdraft && $('.lableadddocument').length != addtionalDocList.length) {
            alert("Please Upload all Additional Document");
            return false;
        }
        else if (userRollTemplate > 1 && $('.chkreqdoc:checked').length != $('.chkreqdoc').length) {
            alert("Please select all checkbox for Required Document");
            return false;
        }else if (userRollTemplate > 1 && $('.chkAdddoc:checked').length != $('.chkAdddoc').length){
            alert("Please select all checkbox for Additional Document");
            return false;
        }else {
            var individuals = $("#individualList").select2('data');
            if (individuals) {
                var newIndividuals = [];
                for(var i =0; i< individuals.length; i++) {
                    var ind = individuals[i];
                    if(ind.isNew) {
                        newIndividuals.push({ fullName: ind.fullName, passportNo: ind.passportNo });
                    }
                }
                if(newIndividuals.length >0) {
                    $("#newIndividualsList").val(JSON.stringify(newIndividuals));
                }
            }
        }
        return true;
    }

    function changeBussinesscode() {
        $('#BusinessCodeids').val($('#businessCodeList').val());
        bindAdditionalTable();
        checkButtonState();
    }

    function changeIndindividual() {
        var individuals = $("#individualList").select2('data');
        var newIndividuals = [];
        for(var i =0; i< individuals.length; i++) {
            var ind = individuals[i];
            if(!ind.isNew) {
                newIndividuals.push(ind.id);
            }
        }
        $('#Individualids').val(newIndividuals.join(','));
    }

    function back() {
        var link = '@Url.Action("PremiseApplication", "PremiseApplication")';
        window.location.href = link;
    }

    function businessTypeChange() {
        if ($("#BusinessTypeID").val() > 0) {
            bindTable();
        }
        checkButtonState();
    }

    function bindDownload(attechmentID) {
        if (attechmentID > 0) {
            window.location.href = "@Url.Action("Download", "PremiseApplication")" + "?attechmentID=" + attechmentID;
        }
    }


    function bindSearch() {
        var param = {};
        param["businessTypeID"] = $("#BusinessTypeID").val();

        if ($("#MLPremiseApplicationID").val() > 0) {
            param["premiseApplicationID"] = $("#MLPremiseApplicationID").val();
        } else {
            param["premiseApplicationID"] = "";
        }

        return param;
    }

    function bindTable() {

        $('#RequiredDocument').show();
        if ($.fn.DataTable.isDataTable("#tblBusinessType")) {
            $('#tblBusinessType').dataTable().fnDestroy();
        }

        table = $("#tblBusinessType").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": false,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("RequiredDocument", "PremiseApplication")',
                type: "POST",
                data: bindSearch()
            },
            "columns": [
                {
                    "title": "Disertakan?",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate > 1) {
                            appendstring += '<div class="checkbox"> <label for="chkdoc_' + row["RequiredDocID"] + '"> <input id="chkdoc_' + row["RequiredDocID"] + '"  value="' + row["RequiredDocID"] + '" class="chkreqdoc" type = "checkbox" onclick = "RequiredDocument();"  ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                        }
                        return appendstring
                    },
                    width: "7%",
                    "orderable": false,
                    "visible": visibleGridColume,
                },
                { "title": "Jenis Dokumen", "data": "RequiredDocDesc", "orderable": false },
                {
                    "title": "Muat Naik",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate == 1) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RequiredDocID"] + '" onclick="RequiredDocumentModel(' + row["RequiredDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        }
                        else if (userRollTemplate > 2) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RequiredDocID"] + '" onclick="RequiredDocumentModel(' + row["RequiredDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        }
                        return appendstring
                    },
                    width: "7%",
                    "orderable": false,
                    "visible": visibleGridUploadColume,
                },
                {
                    "title": "Nama Fail",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';

                        if (visibleGridUploadColume) {
                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank"   href="javascript:void(0);" title="Document" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lablereqdocument" style="cursor: pointer;" id="lblreqAttachment_' + row["RequiredDocID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                            } else {
                                appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lablereqdocument"  id="lblreqAttachment_' + row["RequiredDocID"] + '"> </label> </a>';
                            }

                        } else {
                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["MLPremiseApplicationID"] + ');">' + row["AttachmentFileName"] + '</a>';
                            } else {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                            }
                        }
                        return appendstring
                    },
                    "orderable": false,
                }
            ]
        });
    }

    function bindSearchAdditional() {
        var param = {};
        param["BusinessCodeids"] = $("#BusinessCodeids").val();

        if ($("#MLPremiseApplicationID").val() > 0) {
            param["premiseApplicationID"] = $("#MLPremiseApplicationID").val();
        } else {
            param["premiseApplicationID"] = "";
        }

        return param;
    }

    function bindAdditionalTable() {

        $('#AdditionalDocument').show();
        if ($.fn.DataTable.isDataTable("#tblAdditional")) {
            $('#tblAdditional').dataTable().fnDestroy();
        }

        table = $("#tblAdditional").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": false,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("AdditionalDocument", "PremiseApplication")',
                type: "POST",
                data: bindSearchAdditional()
            },
            "columns": [
                {
                    "title": "Action",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate > 1) {
                            appendstring += '<div class="checkbox"> <label for="chkAdddoc_' + row["AdditionalDocID"] + '"> <input id="chkAdddoc_' + row["AdditionalDocID"] + '" value="' + row["AdditionalDocID"] + '" class="chkAdddoc" type = "checkbox" onclick="AdditionalChecked();" ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                        }
                        return appendstring
                    },
                    "orderable": false,
                    width: "7%",
                    "visible": visibleGridColume,
                },
                { "title": "Additional Document", "data": "DocDesc", "orderable": false },
                {
                    "title": "Action",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate == 1) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["AdditionalDocID"] + '" onclick="AdditionalModel(' + row["AdditionalDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        } else if (userRollTemplate > 2) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["AdditionalDocID"] + '" onclick="AdditionalModel(' + row["AdditionalDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        }
                        return appendstring
                    },
                    "orderable": false,
                    width: "7%",
                    "visible": visibleGridUploadColume,
                },
                {
                    "title": "File Name",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';

                        if (visibleGridUploadColume) {

                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lableadddocument" style="cursor: pointer;"  id="lbladdAttachment_' + row["AdditionalDocID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                            } else {
                                appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lableadddocument"  id="lbladdAttachment_' + row["AdditionalDocID"] + '"> </label> </a>';
                            }

                        } else {
                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["MLPremiseApplicationID"] + ');">' + row["AttachmentFileName"] + '</a>';
                            } else {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                            }
                        }

                        return appendstring
                    },
                    "orderable": false,
                }
            ]
        });
    }

    function RequiredDocument() {

        var RequiredArray = [];
        $('.chkreqdoc').each(function () {
            if ($(this).is(":checked")) {
                RequiredArray.push($(this).val());
            }
        });
        $("#RequiredDocIds").val(RequiredArray);

        checkButtonState();
    }

    function checkButtonState() {
        var isAddtional = false;
        if ($('.chkAdddoc:checked').length == $('.chkAdddoc').length) {
            isAddtional = true;
        }

        var isDocument = false;
        if ($('.chkreqdoc:checked').length == $('.chkreqdoc').length) {
            isDocument = true;
        }

        if (isAddtional && isDocument) {
            $('.btSubmit').show();
        } else {
            $('.btSubmit').hide();
        }
    }

    function AdditionalChecked() {

        var AdditionalArray = [];
        $('.chkAdddoc').each(function () {
            if ($(this).is(":checked")) {
                AdditionalArray.push($(this).val());
            }
        });
        $("#AdditionalDocIds").val(AdditionalArray);

        checkButtonState();
    }

    function RequiredDocumentModel(Requiredid) {
        $("#reqDocid").val(Requiredid);
        $("#addDocid").val("0");
        $('#isReqDoc').val("1");
        $('#uploadDocumentModal').modal('show');
    }

    function AdditionalModel(Additionalid) {
        $("#reqDocid").val("0");
        $("#addDocid").val(Additionalid);
        $('#isReqDoc').val("0");
        $('#uploadDocumentModal').modal('show');
    }

    var strValidateFileFormate = '@TradingLicense.Infrastructure.ProjectConfiguration.UploadFileFormat';
    var _validFileExtensions = [];
    _validFileExtensions = strValidateFileFormate.split(",");

    function UploadDocument(){

        if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

            var data = new FormData();
            var files = $("#DocumentFile").get(0).files;

            if (files.length > 0) {
                data.append("DocumentFile", files[0]);
            }

            data.append("MLPremiseApplicationID", @Model.MLPremiseApplicationID);
            data.append("reqDocid", $("#reqDocid").val());
            data.append("addDocid", $("#addDocid").val());
            data.append("isReqDoc", $("#isReqDoc").val());

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("UploadDocument", "PremiseApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#DocumentFile").val("");
                        if (result.status == 1) {
                            successMessage(result.message);

                            if ($("#isReqDoc").val() > 0) {
                                bindTable();
                            } else {
                                bindAdditionalTable();
                            }
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#uploadDocumentModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        } else {
            alert("Please Select Valid File");
        }
    }

    function UploadAttechment(){

        if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

            var data = new FormData();
            var files = $("#DocumentFile").get(0).files;

            if (files.length > 0) {
                data.append("DocumentFile", files[0]);
            }

            data.append("reqDocid", $("#reqDocid").val());
            data.append("addDocid", $("#addDocid").val());
            data.append("isReqDoc", $("#isReqDoc").val());

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("UploadAttechment", "PremiseApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#DocumentFile").val("");
                        if (result.status == 1) {
                            successMessage("Document Upload Successfully");

                            console.log(result.result);
                            if ($("#isReqDoc").val() > 0) {
                                var lblreqAttachment = "lblreqAttachment_" + $("#reqDocid").val();
                                $('.lablereqdocument').each(function () {
                                    if ($(this).attr('id') == lblreqAttachment) {
                                        $("#" + lblreqAttachment).html(result.result.AttachmentName);
                                        RequiredDocumentDublicateCheck(result.result.RequiredDocID, result.result.AttachmentID);
                                    }
                                });
                            } else {
                                var lbladdAttachment = "lbladdAttachment_" + $("#addDocid").val();
                                $('.lableadddocument').each(function () {
                                    if ($(this).attr('id') == lbladdAttachment) {
                                        $("#" + lbladdAttachment).html(result.result.AttachmentName);
                                        AdditionalDocumentDublicateCheck(result.result.AdditionalDocID, result.result.AttachmentID)
                                    }
                                });
                            }
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#uploadDocumentModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        } else {
            alert("Please Select Valid File");
        }
    }

    function RequiredDocumentDublicateCheck(RequiredDocID, AttachmentID) {
        var itemfound = 0;
        var itemFoundbool = false;

        for (var i = 0; i < requiredDocList.length; i++) {
            var doc = requiredDocList[i].split(',');
            var document = doc[0].split(':');
            if (document[0] == RequiredDocID ) {
                itemfound = i;
                itemFoundbool = true;
                i = requiredDocList.length+1;
            }
        }

        if (itemFoundbool) {
            requiredDocList.splice(itemfound, 1);
        }

        var requiredDocument = RequiredDocID + ":" + AttachmentID;
        requiredDocList.push(requiredDocument);
    }

    function AdditionalDocumentDublicateCheck(AdditionalDocID, AttachmentID) {
        var itemfound = 0;
        var itemFoundbool = false;

        for (var i = 0; i < addtionalDocList.length; i++) {
            var doc = addtionalDocList[i].split(',');
            var document = doc[0].split(':');
            if (document[0] == AdditionalDocID) {
                itemfound = i;
                itemFoundbool = true;
                i = addtionalDocList.length + 1;
            }
        }

        if (itemFoundbool) {
            addtionalDocList.splice(itemfound, 1);
        }

        var additionaDocument = AdditionalDocID + ":" + AttachmentID;
        addtionalDocList.push(additionaDocument);
    }

    function AddRules()
    {
        //validation implementation will go here.
        $("#frmsaveComment").validate({
            rules: {
                txtComment: {
                    required: true
                }
            }
        });
    }

    function Approvedreject(name) {
        if (name == "approved") {
            $("#lblapprovedreject").html("Approve");
            $("#txtComment").rules("remove", "required");
        }
        else {
            AddRules();
            $("#lblapprovedreject").html("Reject");
            $("#txtComment").rules("add", "required");
        }
        $("#lblheaderTitle").html("Add Comment");
        $('#approvedrejectModal').modal('show');
    }

    function SaveComment() {

        if (!$("#frmsaveComment").valid()) {
            return false;
        } else {

            var data = new FormData();
            data.append("MLPremiseApplicationID", @Model.MLPremiseApplicationID);
            data.append("comment", $("#txtComment").val());

            if ($("#lblapprovedreject").html() == "Approve") {
                data.append("approveRejectType", "Approve");
            } else {
                data.append("approveRejectType", "Reject");
            }

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("SaveComment", "PremiseApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#txtComment").val("");
                        if (result.status == 1) {
                            successMessage(result.message);
                            back();
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#approvedrejectModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        }
    }

    function loadComments() {
        $('#Comments').show();
        if ($.fn.DataTable.isDataTable("#tblComments")) {
            $('#tblComments').dataTable().fnDestroy();
        }

        var data = { "MLPremiseApplicationID": @Model.MLPremiseApplicationID };

        table = $("#tblComments").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": true,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("PremiseComments", "PremiseApplication")',
                type: "POST",
                data: data
            },
            "columns": [
                {
                    "targets": 0,
                    "searchable": false,
                    "orderable": false,
                    "title": "No.",
                    "data": null,
                    "render": function (data, type, full, meta) {
                        return meta.settings._iDisplayStart + meta.row + 1;
                    }
                },
                {
                    "title": "Comment",
                    "orderable": false,
                    "data": "Comment"
                },
                { "title": "Posted On", "data": "CommentDate", "width": "150px", render: renderDateTime },
            ]
        });
    }

    function loadRouteComments() {
        $('#RouteComments').show();
        if ($.fn.DataTable.isDataTable("#tblRouteComments")) {
            $('#tblRouteComments').dataTable().fnDestroy();
        }

        var data = { "MLPremiseApplicationID": @Model.MLPremiseApplicationID };

        table = $("#tblRouteComments").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": true,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("PremiseRouteComments", "PremiseApplication")',
                type: "POST",
                data: data
            },
            "columns": [
                {
                    "targets": 0,
                    "searchable": false,
                    "orderable": false,
                    "title": "No.",
                    "data": null,
                    "render": function (data, type, full, meta) {
                        return meta.settings._iDisplayStart + meta.row + 1;
                    }
                },
                {
                    "title": "Comment",
                    "orderable": false,
                    "data": "Comment"
                },
                {
                    "title": "Department",
                    "orderable": false,
                    "data": "Department"
                },
                {
                    "title": "Is Supported",
                    "orderable": false,
                    "data": "IsSupported"
                },
                {
                    "title": "Submitted By",
                    "orderable": false,
                    "data": "SubmittedBy"
                },
                { "title": "Submitted On", "data": "SubmittedDate", "width": "150px", render: renderDateTime },
            ]
        });
    }

    function showRouteUnitConfirmModal() {
        if(validatePremiseApplication()) {
            $('#routeUnitModal').modal('show');
            $('#RouteUnitTable').show();
            if ($.fn.DataTable.isDataTable("#tblRouteDepartments")) {
                $('#tblRouteDepartments').dataTable().fnDestroy();
            }

            var data = { "businessCodeids": $('#BusinessCodeids').val() };

            table = $("#tblRouteDepartments").dataTable({
                "lengthChange": true,
                "searching": false,
                "pageLength": 10,
                "processing": true,
                "serverSide": true,
                "bPaginate": true,
                "bInfo": false,
                "orderMulti": false,
                "ajax": {
                    url: '@Url.Action("FillRouteDepartments", "PremiseApplication")',
                    type: "POST",
                    data: data
                },
                "columns": [
                    {
                        "targets": 0,
                        "searchable": false,
                        "orderable": false,
                        "title": "No.",
                        "data": null,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "title": "Department Code", "orderable": true, "data": "DepartmentCode" },
                    { "title": "Department Name", "orderable": true, "data": "DepartmentDesc" },
                    {
                        "title": "Dalam/Luar",
                        "data": "Internal",
                        "render": function (data, type, row) {
                            if (data==1) {
                                return '<label class="label label-success">Dalam</label>';
                            }
                            else {
                                return '<label class="label label-danger">Luar</label>';
                            }
                        },
                        "width": "10%",
                        "orderable": true,
                    },
                    {
                        "title": "Aktif",
                        "data": "Active",
                        "render": function (data, type, row) {
                            if (data) {
                                return '<label class="label label-success">Aktif</label>';
                            }
                            else {
                                return '<label class="label label-danger">Tidak Aktif</label>';
                            }
                        },
                        "width": "10%",
                        "orderable": true,
                    }
                ]
            });
        }

        return false;
    }

    function showPaymentsDuePopup() {

        var data = new FormData();
        data.append("MLPremiseApplicationID", @Model.MLPremiseApplicationID);

        var ajaxRequest = $.ajax({
            type: "POST",
            url: '@Url.Action("GetPaymentDue", "PremiseApplication")',
            contentType: false,
            processData: false,
            data: data,
            async: false,
            success: function (result) {
                $("#totalDue").val(0);
                if (result != null) {
                    $("#totalDue").val(result.totalDue);
                }
                $("#showPaymentsDue").modal('show');
            },
            error: function (xhr, ajaxOptions, thrownError) {
                errorMessage(xhr.responseText);
            }
        });

    }

    function RoutePremiseApplication() {
        $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnRouteSubmit');
        $("#frmPremiseApplication").submit();
        return false;
    }

    function Approved() {
        $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnSubmit');
        $("#frmPremiseApplication").submit();
        return false;
    }

    function Rejected() {
        $('#SubmitType').val('@TradingLicense.Web.Controllers.PremiseApplicationController.OnRejected');
        $("#frmPremiseApplication").submit();
        return false;
    }


    $(document).ready(function () {
        hideLetterDropDown();
        $('#btnLetter').click(function () {
            $('.modal-body iframe').attr('src', "../PremiseApplication/GenerateLetter?AppId=@Model.MLPremiseApplicationID");
            $('#myModal').modal('show');
        });
    });

    function hideLetterDropDown()
    {
        if($('#btnLetter') != null && $('#btnLetter').length)
        {
            $('#btnLetter').show();
            $('#btnLetter').css('visibility', 'visible');
            if(!($('#Mode').val() == 1 || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationApproved) || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationApprovedwithTermsConditions) || $('#AppStatusID').val() == @((int)Enums.PAStausenum.LetterofnotificationRejected)))
            {
                $('#btnLetter').hide();
            }
        }
    }

</script>


}
