@model TradingLicense.Model.HawkerApplicationModel
@using AutoMapper;
@{
    ViewBag.Title = "ManageHawkerApplication";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    //Generate list of Hawker Codes
    List<TradingLicense.Model.HawkerCodeModel> hawkerCodeList = new List<TradingLicense.Model.HawkerCodeModel>();
    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {
        var hawkerCode = ctx.HawkerCodes.ToList();
        hawkerCodeList = Mapper.Map<List<TradingLicense.Model.HawkerCodeModel>>(hawkerCode);
    }

    //Generate list of all Individuals for Helper list, can select more than one
    List<TradingLicense.Model.IndividualModel> individualList = new List<TradingLicense.Model.IndividualModel>();

    //Generate list of all Individual for Owner field, can select one only
    List<TradingLicense.Model.IndividualModel> individualOwner = new List<TradingLicense.Model.IndividualModel>();
    using (var ctx = new TradingLicense.Data.LicenseApplicationContext())
    {

        var individualOwnerList = ctx.Individuals.ToList();
        individualOwner = Mapper.Map<List<TradingLicense.Model.IndividualModel>>(individualOwnerList);
    }

    //Generate list of all Required Documents
    List<TradingLicense.Entities.HAReqDoc> hawkerDocList = new List<TradingLicense.Entities.HAReqDoc>();
    
}
<div id="divMessage"></div>
<div class="card">
    <div class="header">
        <h4 id="headerTitle">Kemaskini Permohonan Lesen Penjaja</h4>
    </div>
    <div class="body">

        @using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmHawkerApplication", id = "frmHawkerApplication" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.HawkerApplicationID)
            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        <div class="control-label">Nama Pemohon<span class="cfont">*</span></div>
                        @Html.DropDownListFor(m => m.IndividualID, new SelectList(individualOwner, "IndividualID", "FullName"), "Masukkan Nama atau MyKad", new { @id = "individualOwner", @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        <div class="control-label">Kod Lesen Pasar</div>
                        @Html.DropDownList("HawkerCode", new SelectList(hawkerCodeList.OrderBy(x => x.HawkerCodeID), "HawkerCodeID", "HawkerCodeDesc"), "Pilih Kod Lesen Pasar", new { @class = "form-control" })
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"> Jenis Barang Dijaja <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.GoodsType, new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Lokasi Perniagaan<span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.FullName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.FullName)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label"> Masa Berniaga <span class="cfont">*</span></div>
                        @Html.TextBoxFor(m => m.OperationHours, new { @class = "form-control" })
                    </div>
                </div>
            </div>
                        
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="control-label">Nama Pembantu (Mykad/Paspot)</div>
                        @Html.DropDownList("Individual", new SelectList(Model.selectedIndividualList.OrderBy(x => x.text), "id", "text"), "Select  Mykad/Passport No", new { @id = "individualList", @class = "form-control", multiple = "true", onchange = "changeIndindividual()" })
                        @Html.HiddenFor(model => model.Individualids)
                        @Html.HiddenFor(model => model.newIndividualsList)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <div class="h4">Dokumen Wajib <br /><br /></div>
                        <div class="alert alert-danger" id="chkReqDoc" role="alert" style="display:none;">
                            Pastikan semua ruangan kosong telah diisi!
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover table-bordered dataTable no-footer" style="width:100%" role="grid" cellspacing="0" id="Docs">
                                <thead>
                                <th> Disertakan? </th>
                                <th> Jenis Dokumen </th>
                                </thead>
                                @foreach (var item in ViewBag.hawkerDocList)
                                {
                                    <tr>
                                        <td>
                                            <label>
                                                @if (@ViewBag.UserRole != 2)
                                                {
                                                    <input class="fileupload" type="file" multiple id='@item.RequiredDocID' />
                                                    <input type="hidden" value='@item.RequiredDocID' class="hdndocId" />
                                                }
                                                else
                                                {
                                                    if (@Model.HawkerApplicationID > 0 && (@ViewBag.UserRole == 2 && @Model.AppStatusID == 2))
                                                    {
                                                        <input class="chkClass" checked type="checkbox" id='@item.RequiredDocID' />
                                                    }
                                                    else
                                                    { <input class="chkClass" type="checkbox" id='@item.RequiredDocID' /> }
                                                }
                                            </label>
                                            <ul class="attachment">
                                                @if (@ViewBag.UserRole != 2)
                                                {
                                                    foreach (var item1 in ViewBag.HALinkReqDoc)
                                                    {
                                                        <li>
                                                            @if (@item1.RequiredDocID == @item.RequiredDocID)
                                                            {
                                                                <a class="title" href="#"><label class="fname">@item1.filename</label> </a>
                                                                <a href="javascript:void(0);" data-id="@item1.Id" class="deleteItem"><i class="glyphicon glyphicon-remove-circle"></i></a>
                                                            }
                                                        </li>
                                                    }
                                                }
                                            </ul>

                                        </td>
                                        <td>
                                            <label>
                                                @item.RequiredDoc.RequiredDocDesc
                                            </label>

                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            if (Model.UserRollTemplate > 1)
            {
                <div class="row">
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control-label">
                                Masukkan Catatan baru
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12">
                        <div class="form-group">
                            <div class="control">
                                @Html.TextAreaFor(m => m.newComment, new { @class = "form-control", rows = "5" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12" id="Comments" style="display:none;">
                        <div class="form-group">
                            <div class="control-label">
                                Senarai Catatan
                            </div>
                            <table cellspacing="0" class="table table-hover table-bordered" style="width:100%" id="tblComments"></table>
                        </div>
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        <input type="button" class="btn btn-primary btSubmit" value="Generate License" id="btnLetter" name="btnSubmit" />
                        @if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public && (Model.AppStatusID == 10 || Model.AppStatusID == 11 || Model.AppStatusID == 12))
                        {
                            <input type="button" class="btn btn-primary btSubmit" value="Cetak Surat Perakuan" id="btnLetter" name="btnSubmit" />

                        }
                        @if (Model.AppStatusID == 10 || Model.AppStatusID == 12)
                        {
                            <input type="button" class="btn btn-primary btSubmit" value="Public Signed Letter" id="btnGetPaymentDue" onclick="showPaymentsDuePopup();" />
                                <input type="button" class="btn btn-primary btSubmit" value="Show Payments Due" id="btnGetPaymentDue" />
                        }
                        @if (Model.AppStatusID == 14)
                        {
                            // Add a button for showing License print
                            <input type="button" class="btn btn-primary btSubmit" value="Generate License" id="btnGenrateLicense" onclick="alert('We need to Generate license');" />
                        }
                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public || Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.DeskOfficer)
                        {
                            if (Model.AppStatusID == 0 || Model.AppStatusID == (int)TradingLicense.Infrastructure.Enums.PAStausenum.draftcreated)
                            {<input type="submit" class="btn btn-primary" onclick='frmSubmit(true); return false;' id="btnsubmitdraft" value="Simpan Draf " /> }

                            if (Model.AppStatusID == 0 || Model.AppStatusID == (int)TradingLicense.Infrastructure.Enums.PAStausenum.draftcreated)
                            {
                                <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                            }
                        }

                        @*@if (Model.UserRollTemplate > (int)TradingLicense.Infrastructure.Enums.RollTemplate.Public)
                            {
                                <input type="submit" class="btn btn-primary btSubmit" value="Submit" onclick='frmSubmit(true); return false;' id="btnsubmit" />
                            }*@

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Clerk && Model.HawkerApplicationID > 0 && (Model.AppStatusID >= 2 && Model.AppStatusID <= 4))
                        {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return showRouteUnitConfirmModal();'>Route Application</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Submit to Director</button>
                        }

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.RouteUnit && Model.HawkerApplicationID > 0)
                        {

                        }

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Supervisor && Model.HawkerApplicationID > 0)
                        {

                        }

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Director && Model.HawkerApplicationID > 0 && (Model.AppStatusID == 7 || Model.AppStatusID == 6))
                        {
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Approved();'>Approved</button>
                            <button type="button" class="btn btn-primary btSubmit" onclick='return Rejected();'>Reject</button>
                        }

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.CEO && Model.HawkerApplicationID > 0 && (Model.AppStatusID == 8))
                        {
                            <input type="submit" class="btn btn-primary btSubmit" value="Hantar" onclick='frmSubmit(false); return false;' />
                        }

                        @if (Model.UserRollTemplate == (int)TradingLicense.Infrastructure.Enums.RollTemplate.Administrator && Model.HawkerApplicationID > 0)
                        {

                        }

                        <input type="button" class="btn btn-default" value="Kembali" onclick="back()" />

                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section scripts{                                                                                                  
<script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker({dateFormat: 'dd/MM/yy'});
        })
</script>
<script>


    var userRollTemplate = 0;
    var visibleGridColume = false;
    var visibleGridUploadColume = false;

    var requiredDocList = [];
    var selectedMode = '@ViewBag.SelectedMode';

    var actionError = '@(TempData["ErrorMessage"])';
    if (actionError != null && actionError != "") {
        errorMessage(actionError);
    }

    $(function () {

        userRollTemplate = $("#UserRollTemplate").val();

        var success = '@(TempData["SuccessMessage"])';
        if (success != null && success != "") {
            successMessage(success);
        }

        var actionError = '@(TempData["ErrorMessage"])';
        if (actionError != null && actionError != "") {
            errorMessage(actionError);
        }

        visibleGridUploadColume = true;
        if (userRollTemplate > 1) {
            visibleGridColume = true;
        }

        $("#individualOwner").select2({ width: '100%' });


        AddRules();

        function individualFormating(state) {
            if (!state.isNew) {
                return state.text;
            }

            state.text = state.fullName + ' (' + state.passportNo +')';
            var $state = $(
              '<span>' + state.text +'&nbsp;</span>'
            );
            if(state.isNew) {
                var editLink = $(' <a href="javascript:void(0);">Edit</a>');
                editLink.on('click', function() {
                    showIndividualModal(state);
                });
                $state.append(editLink);
            }
            return $state;
        }

        $("#individualList").select2({
            placeholder: "Masukkan Nama atau MyKad",
            minimumInputLength: 2,
            width: '100%',
            tags: true,
            tokenSeparators: [';'],
            templateSelection: individualFormating,
            createTag: function (params) {
                var term = params.term;
                var indexOfPassport = term.indexOf('(');
                var fullName= '';
                var passportNo = '';
                if(indexOfPassport > 0) {
                    var endIndex = term.indexOf(')', indexOfPassport);
                    passportNo = endIndex > 0 ? term.substring(indexOfPassport + 1, endIndex) : term.substring(indexOfPassport + 1);
                    fullName = term.substring(0, indexOfPassport);
                } else {
                    fullName = term;
                }

                return {
                    id: term,
                    text: fullName + ' (' + passportNo +')',
                    fullName: fullName,
                    passportNo: passportNo,
                    isNew: true
                };
            },
            ajax: {
                type: "POST",
                url: encodeURI('@Url.Action("FillIndividual", "HawkerApplication")'),
                //Data: allows us to pass a parameter to the controller
                data: function (query) {
                    //console.log(query)
                    return { query: query.term }
                },
                //processes the results from the JSON method and gives us the select list
                processResults: function (data) {
                    //console.log(data)
                    return {
                        results: data
                    };
                }
            }
        });

        var individualSelecteId = [];
        if ('@Model.Individualids' != null && '@Model.Individualids' != '') {
            var individualIds = '@Model.Individualids';

            var arr = individualIds.split(',');
            $.each(arr, function (index, value) {
                individualSelecteId.push(value);
            });
            $('#individualList').val(individualSelecteId);
            $('#individualList').trigger('change');
        } else {
            individualSelecteId = [];
        }


        if ('@Model.UploadRequiredDocids' != null && '@Model.UploadRequiredDocids' != '') {

            var UploadRequiredDocumentlist = '@Model.UploadRequiredDocids';

            var arr = UploadRequiredDocumentlist.split(',');
            $.each(arr, function (index, value) {
                requiredDocList.push(value);
            });
        }

        $("#preAppid").val(@Model.HawkerApplicationID);

        $(".allownumericwithdecimal").on("keypress keyup blur", function (event) {
            $(this).val($(this).val().replace(/[^0-9\.]/g, ''));
            if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                event.preventDefault();
            }
        });
    });

    if(@Model.HawkerApplicationID > 0 && @Model.UserRollTemplate > 1) {
        loadComments();
    }

    function frmSubmit(isdraft) {

        $("#IsDraft").val(isdraft);
        $("#UploadRequiredDocids").val(requiredDocList);

        RequiredDocument();

        if (!$("#frmHawkerApplication").valid())
        {
            return false;
        }
        else if (userRollTemplate > 1 && $('#Individualids').val() == "")
                {
                    alert("Please select Mykad/Passport No");
                    return false;
                }
                else if (userRollTemplate == 1 && isdraft && $('.lablereqdocument').length != requiredDocList.length)
                        {
                            alert("Please Upload all Required Document");
                            return false;
                        }
                        else if (userRollTemplate > 1 && $('.chkreqdoc:checked').length != $('.chkreqdoc').length)
                                {
                                    alert("Please select all checkbox for Required Document");
                                    return false;
                                }
                                else
                                {
                                    var individuals = $("#individualList").select2('data');
                                    if (individuals)
                                        {
                                        var newIndividuals = [];
                                        for(var i =0; i< individuals.length; i++)
                                            {
                                            var ind = individuals[i];
                                            if(ind.isNew)
                                                {
                                                    newIndividuals.push({ fullName: ind.fullName, passportNo: ind.passportNo });
                                                }
                                            }
                                            if(newIndividuals.length >0)
                                            {
                                                $("#newIndividualsList").val(JSON.stringify(newIndividuals));
                                            }
                                        }
                                    $("#frmHawkerApplication").submit();
                                }
    }



    function changeIndindividual() {
        var individuals = $("#individualList").select2('data');
        var newIndividuals = [];
        for(var i =0; i< individuals.length; i++) {
            var ind = individuals[i];
            if(!ind.isNew) {
                newIndividuals.push(ind.id);
            }
        }
        $('#Individualids').val(newIndividuals.join(','));
        //alert($('#Individualids').val());
    }

    function back() {
        var link = '@Url.Action("HawkerApplication", "HawkerApplication")';
        window.location.href = link;
    }

    function bindDownload(attechmentID) {
        if (attechmentID > 0) {
            window.location.href = "@Url.Action("Download", "HawkerApplication")" + "?attechmentID=" + attechmentID;
        }
    }


    function bindTable() {

        $('#RequiredDocument').show();
        if ($.fn.DataTable.isDataTable("#tblBusinessType")) {
            $('#tblBusinessType').dataTable().fnDestroy();
        }

        table = $("#tblBusinessType").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": false,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("RequiredDocument", "HawkerApplication")',
                type: "POST",
                data: bindSearch()
            },
            "columns": [
                {
                    "title": "Disertakan?",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate > 1) {
                            appendstring += '<div class="checkbox"> <label for="chkdoc_' + row["RequiredDocID"] + '"> <input id="chkdoc_' + row["RequiredDocID"] + '"  value="' + row["RequiredDocID"] + '" class="chkreqdoc" type = "checkbox" onclick = "RequiredDocument();"  ' + row["IsChecked"] + ' /><span class="pointer"><img src="../images/checkmark.svg" alt="Checkmark" width="20px" height="20px" /></span></label> </div>';
                        }
                        return appendstring
                    },
                    width: "7%",
                    "orderable": false,
                    "visible": visibleGridColume,
                },
                { "title": "Jenis Dokumen", "data": "RequiredDocDesc", "orderable": false },
                {
                    "title": "Muat Naik",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';
                        if (userRollTemplate == 1) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RequiredDocID"] + '" onclick="RequiredDocumentModel(' + row["RequiredDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        }
                        else if (userRollTemplate > 2) {
                            appendstring += '<a href="javascript:void(0);" title="Upload" data-id="' + row["RequiredDocID"] + '" onclick="RequiredDocumentModel(' + row["RequiredDocID"] + ');"> <button type="button" class="btn btn-primary">Upload</button></a>';
                        }
                        return appendstring
                    },
                    width: "7%",
                    "orderable": false,
                    "visible": visibleGridUploadColume,
                },
                {
                    "title": "Nama Fail",
                    "data": null,
                    "render": function (data, type, row) {
                        var appendstring = '';

                        if (visibleGridUploadColume) {
                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank"   href="javascript:void(0);" title="Document" onclick="bindDownload(' + row["AttachmentId"] + ');"> <label class="lablereqdocument" style="cursor: pointer;" id="lblreqAttachment_' + row["RequiredDocID"] + '"> ' + row["AttachmentFileName"] + ' </label> </a>';

                            } else {
                                appendstring += '<a target="_blank"  href="javascript:void(0);" title="Document"> <label class="lablereqdocument"  id="lblreqAttachment_' + row["RequiredDocID"] + '"> </label> </a>';
                            }

                        } else {
                            if (row["AttachmentFileName"] != null && row["AttachmentFileName"] != "") {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title="Download" onclick="bindDownload(' + row["AttachmentId"] + "," + row["HawkerApplicationID"] + ');">' + row["AttachmentFileName"] + '</a>';
                            } else {
                                appendstring += '<a target="_blank" href="javascript:void(0);" title=""></a>';
                            }
                        }
                        return appendstring
                    },
                    "orderable": false,
                }
            ]
        });
    }





    function RequiredDocument() {

        var RequiredArray = [];
        $('.chkreqdoc').each(function () {
            if ($(this).is(":checked")) {
                RequiredArray.push($(this).val());
            }
        });
        $("#RequiredDocIds").val(RequiredArray);
    }

    function checkButtonState() {

        var isDocument = false;
        if ($('.chkreqdoc:checked').length == $('.chkreqdoc').length) {
            isDocument = true;
        }

        if (isDocument) {
            $('.btSubmit').show();
        } else {
            $('.btSubmit').hide();
        }
    }



    function RequiredDocumentModel(Requiredid) {
        $("#reqDocid").val(Requiredid);
        $("#addDocid").val("0");
        $('#isReqDoc').val("1");
        $('#uploadDocumentModal').modal('show');
    }



    var strValidateFileFormate = '@TradingLicense.Infrastructure.ProjectConfiguration.UploadFileFormat';
    var _validFileExtensions = [];
    _validFileExtensions = strValidateFileFormate.split(",");

    function UploadDocument(){

        if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

            var data = new FormData();
            var files = $("#DocumentFile").get(0).files;

            if (files.length > 0) {
                data.append("DocumentFile", files[0]);
            }

            data.append("HawkerApplicationID", @Model.HawkerApplicationID);
            data.append("reqDocid", $("#reqDocid").val());
            data.append("isReqDoc", $("#isReqDoc").val());

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("UploadDocument", "HawkerApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#DocumentFile").val("");
                        if (result.status == 1) {
                            successMessage(result.message);

                            if ($("#isReqDoc").val() > 0) {
                                bindTable();
                            } else {
                                bindAdditionalTable();
                            }
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#uploadDocumentModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        } else {
            alert("Please Select Valid File");
        }
    }

    function UploadAttechment(){

        if (checkforValidUploadedfiles($("#DocumentFile")[0].files, _validFileExtensions) && $('#frmuploadDocument').valid()) {

            var data = new FormData();
            var files = $("#DocumentFile").get(0).files;

            if (files.length > 0) {
                data.append("DocumentFile", files[0]);
            }

            data.append("reqDocid", $("#reqDocid").val());
            data.append("isReqDoc", $("#isReqDoc").val());

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("UploadAttechment", "HawkerApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#DocumentFile").val("");
                        if (result.status == 1) {
                            successMessage("Document Upload Successfully");

                            console.log(result.result);
                            if ($("#isReqDoc").val() > 0) {
                                var lblreqAttachment = "lblreqAttachment_" + $("#reqDocid").val();
                                $('.lablereqdocument').each(function () {
                                    if ($(this).attr('id') == lblreqAttachment) {
                                        $("#" + lblreqAttachment).html(result.result.AttachmentName);
                                        RequiredDocumentDublicateCheck(result.result.RequiredDocID, result.result.AttachmentID);
                                    }
                                });
                            }
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#uploadDocumentModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        } else {
            alert("Please Select Valid File");
        }
    }

    function RequiredDocumentDublicateCheck(RequiredDocID, AttachmentID) {
        var itemfound = 0;
        var itemFoundbool = false;

        for (var i = 0; i < requiredDocList.length; i++) {
            var doc = requiredDocList[i].split(',');
            var document = doc[0].split(':');
            if (document[0] == RequiredDocID ) {
                itemfound = i;
                itemFoundbool = true;
                i = requiredDocList.length+1;
            }
        }

        if (itemFoundbool) {
            requiredDocList.splice(itemfound, 1);
        }

        var requiredDocument = RequiredDocID + ":" + AttachmentID;
        requiredDocList.push(requiredDocument);
    }

    function AddRules()
    {
        //validation implementation will go here.
        $("#frmsaveComment").validate({
            rules: {
                txtComment: {
                    required: true
                }
            }
        });
    }

    function Approvedreject(name) {
        if (name == "approved") {
            $("#lblapprovedreject").html("Approve");
            $("#txtComment").rules("remove", "required");
        }
        else {
            AddRules();
            $("#lblapprovedreject").html("Reject");
            $("#txtComment").rules("add", "required");
        }
        $("#lblheaderTitle").html("Add Comment");
        $('#approvedrejectModal').modal('show');
    }

    function SaveComment() {

        if (!$("#frmsaveComment").valid()) {
            return false;
        } else {

            var data = new FormData();
            data.append("HawkerApplicationID", @Model.HawkerApplicationID);
            data.append("comment", $("#txtComment").val());

            if ($("#lblapprovedreject").html() == "Approve") {
                data.append("approveRejectType", "Approve");
            } else {
                data.append("approveRejectType", "Reject");
            }

            var ajaxRequest = $.ajax({
                type: "POST",
                url: '@Url.Action("SaveComment", "HawkerApplication")',
                contentType: false,
                processData: false,
                data: data,
                async: false,
                success: function (result) {
                    if (result != null) {
                        $("#txtComment").val("");
                        if (result.status == 1) {
                            successMessage(result.message);
                            back();
                        }
                        else {
                            errorMessage(result.message);
                        }
                    }
                    $("#approvedrejectModal").modal('hide');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    errorMessage(xhr.responseText);
                }
            });

        }
    }

    $(document).ready(function () {
        hideLetterDropDown();
        $('#btnLetter').click(function () {
            $('.modal-body iframe').attr('src', "../HawkerApplication/GenerateLetter?AppId=1");
            $('#myModal').modal('show');
        });
    });

    function hideLetterDropDown()
    {
        if($('#btnLetter') != null)
        {
            document.getElementById('btnLetter').style.display=''
            $('#btnLetter').css('visibility', 'visible');
            if($('#Mode').val() != 1 || $('#AppStatusID').val() == 10 || $('#AppStatusID').val() == 11 || $('#AppStatusID').val() == 12)
            {
                document.getElementById('btnLetter').style.display='none';
            }
        }
    }

    function loadComments() {
        $('#Comments').show();
        if ($.fn.DataTable.isDataTable("#tblComments")) {
            $('#tblComments').dataTable().fnDestroy();
        }

        var data = { "HawkerApplicationID": @Model.HawkerApplicationID };

        table = $("#tblComments").dataTable({
            "lengthChange": true,
            "searching": false,
            "pageLength": 50,
            "processing": true,
            "serverSide": true,
            "bPaginate": true,
            "bInfo": false,
            "orderMulti": false,
            "ajax": {
                url: '@Url.Action("HawkerComments", "HawkerApplication")',
                type: "POST",
                data: data
            },
            "columns": [
                {
                    "targets": 0,
                    "searchable": false,
                    "orderable": false,
                    "title": "No.",
                    "data": null,
                    "render": function (data, type, full, meta) {
                        return meta.settings._iDisplayStart + meta.row + 1;
                    }
                },
                {
                    "title": "Comment",
                    "orderable": false,
                    "data": "Comment"
                },
                { "title": "Posted On", "data": "CommentDate", "width": "150px", render: renderDateTime },
            ]
        });
    }
    $('#btnLetter').click(function () {
        var AppId = $('#HawkerApplicationID').val();
        $('.modal-body iframe').attr('src', "../HawkerApplication/GeneratLicense?AppId=" + '@ViewBag.HawkerApplicationID');
        $('#myModal').modal('show');
    });


</script>
}
